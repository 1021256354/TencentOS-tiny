<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\TencentOS_tiny.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\TencentOS_tiny.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Oct 31 16:31:15 2019
<BR><P>
<H3>Maximum Stack Usage =       1496 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
application_entry &rArr; mqtt_basic_thread &rArr; IOT_MQTT_Construct &rArr; IOT_Sign_MQTT &rArr; _iotx_generate_sign_string &rArr; utils_hmac_sha256 &rArr; utils_sha256_finish &rArr; utils_sha256_update &rArr; utils_sha256_process
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[25b]">port_int_disable</a>
 <LI><a href="#[25c]">port_int_enable</a>
 <LI><a href="#[241]">port_cpsr_save</a>
 <LI><a href="#[240]">port_cpsr_restore</a>
 <LI><a href="#[23f]">port_clz</a>
 <LI><a href="#[19b]">port_sched_start</a>
 <LI><a href="#[195]">port_context_switch</a>
 <LI><a href="#[199]">port_irq_context_switch</a>
 <LI><a href="#[18]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2c]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2c]">ADC1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[14]">BusFault_Handler</a> from stm32l4xx_it_module.o(i.BusFault_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2e]">CAN1_RX0_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2f]">CAN1_RX1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[30]">CAN1_SCE_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2d]">CAN1_TX_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4b]">COMP_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[59]">CRS_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[25]">DMA1_Channel1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[26]">DMA1_Channel2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[27]">DMA1_Channel3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[28]">DMA1_Channel4_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[29]">DMA1_Channel5_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel6_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel7_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[46]">DMA2_Channel1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[47]">DMA2_Channel2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[48]">DMA2_Channel3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[49]">DMA2_Channel4_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Channel5_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Channel6_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Channel7_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[17]">DebugMon_Handler</a> from stm32l4xx_it_module.o(i.DebugMon_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[20]">EXTI0_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[40]">EXTI15_10_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[21]">EXTI1_IRQHandler</a> from stm32l4xx_it_module.o(i.EXTI1_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[22]">EXTI2_IRQHandler</a> from stm32l4xx_it_module.o(i.EXTI2_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[23]">EXTI3_IRQHandler</a> from stm32l4xx_it_module.o(i.EXTI3_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[24]">EXTI4_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[31]">EXTI9_5_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1e]">FLASH_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[58]">FPU_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[12]">HardFault_Handler</a> from stm32l4xx_it_module.o(i.HardFault_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[38]">I2C1_ER_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[37]">I2C1_EV_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3a]">I2C2_ER_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[39]">I2C2_EV_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[68]">IOT_MQTT_Publish_Simple</a> from mqtt_api.o(i.IOT_MQTT_Publish_Simple) referenced from mqtt_api.o(i.iotx_mqtt_report_funcs)
 <LI><a href="#[4c]">LPTIM1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4d]">LPTIM2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[50]">LPUART1_IRQHandler</a> from stm32l4xx_it_module.o(i.LPUART1_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[13]">MemManage_Handler</a> from stm32l4xx_it_module.o(i.MemManage_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[11]">NMI_Handler</a> from stm32l4xx_it_module.o(i.NMI_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1b]">PVD_PVM_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[18]">PendSV_Handler</a> from port_s.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[51]">QUADSPI_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1f]">RCC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[57]">RNG_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[41]">RTC_Alarm_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1d]">RTC_WKUP_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[10]">Reset_Handler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[54]">SAI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[42]">SDMMC1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3b]">SPI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3c]">SPI2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[43]">SPI3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[16]">SVC_Handler</a> from stm32l4xx_it_module.o(i.SVC_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[55]">SWPMI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[19]">SysTick_Handler</a> from stm32l4xx_it_module.o(i.SysTick_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[5b]">SystemInit</a> from system_stm32l4xx.o(i.SystemInit) referenced from startup_stm32l431xx.o(.text)
 <LI><a href="#[1c]">TAMP_STAMP_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[32]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[35]">TIM1_CC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[34]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[33]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[36]">TIM2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[44]">TIM6_DAC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[45]">TIM7_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[56]">TSC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[61]">UART_DMAAbortOnError</a> from stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[62]">UART_RxISR_16BIT</a> from stm32l4xx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
 <LI><a href="#[63]">UART_RxISR_8BIT</a> from stm32l4xx_hal_uart.o(i.UART_RxISR_8BIT) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
 <LI><a href="#[3d]">USART1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3e]">USART2_IRQHandler</a> from stm32l4xx_it_module.o(i.USART2_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3f]">USART3_IRQHandler</a> from stm32l4xx_it_module.o(i.USART3_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[15]">UsageFault_Handler</a> from stm32l4xx_it_module.o(i.UsageFault_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1a]">WWDG_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[5c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l431xx.o(.text)
 <LI><a href="#[5e]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[5f]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[5d]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[66]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[66]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[71]">application_entry</a> from aliyun_iotkit_csdk_mqtt.o(i.application_entry) referenced from main.o(.constdata)
 <LI><a href="#[6f]">at_parser</a> from tos_at.o(i.at_parser) referenced from tos_at.o(i.tos_at_init)
 <LI><a href="#[64]">bufchar</a> from mqttpacket.o(i.bufchar) referenced from mqttpacket.o(i.MQTTPacket_decodeBuf)
 <LI><a href="#[f]">esp8266_close</a> from esp8266.o(i.esp8266_close) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[8]">esp8266_connect</a> from esp8266.o(i.esp8266_connect) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[5]">esp8266_incoming_data_process</a> from esp8266.o(i.esp8266_incoming_data_process) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[6]">esp8266_init</a> from esp8266.o(i.esp8266_init) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[7]">esp8266_parse_domain</a> from esp8266.o(i.esp8266_parse_domain) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[b]">esp8266_recv</a> from esp8266.o(i.esp8266_recv) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[a]">esp8266_recv_timeout</a> from esp8266.o(i.esp8266_recv_timeout) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[d]">esp8266_recvfrom</a> from esp8266.o(i.esp8266_recvfrom) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[e]">esp8266_recvfrom_timeout</a> from esp8266.o(i.esp8266_recvfrom_timeout) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[9]">esp8266_send</a> from esp8266.o(i.esp8266_send) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[c]">esp8266_sendto</a> from esp8266.o(i.esp8266_sendto) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[6e]">example_event_handle</a> from mqtt_example.o(i.example_event_handle) referenced from mqtt_example.o(i.mqtt_basic_thread)
 <LI><a href="#[67]">example_message_arrive</a> from mqtt_example.o(i.example_message_arrive) referenced from mqtt_example.o(i.example_subscribe)
 <LI><a href="#[65]">fputc</a> from mcu_init.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[65]">fputc</a> from mcu_init.o(i.fputc) referenced from printfa.o(i.__0vprintf)
 <LI><a href="#[6c]">iotx_net_connect</a> from infra_net.o(i.iotx_net_connect) referenced from infra_net.o(i.iotx_net_init)
 <LI><a href="#[6b]">iotx_net_disconnect</a> from infra_net.o(i.iotx_net_disconnect) referenced from infra_net.o(i.iotx_net_init)
 <LI><a href="#[60]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[6d]">knl_idle_entry</a> from tos_sys.o(i.knl_idle_entry) referenced from tos_sys.o(i.knl_idle_init)
 <LI><a href="#[5a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[70]">task_exit</a> from tos_task.o(i.task_exit) referenced from tos_task.o(i.tos_task_create)
 <LI><a href="#[69]">utils_net_read</a> from infra_net.o(i.utils_net_read) referenced from infra_net.o(i.iotx_net_init)
 <LI><a href="#[6a]">utils_net_write</a> from infra_net.o(i.utils_net_write) referenced from infra_net.o(i.iotx_net_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(.text)
</UL>
<P><STRONG><a name="[255]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[72]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[86]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[256]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[257]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[258]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[259]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[25a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[10]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[25b]"></a>port_int_disable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text), UNUSED)

<P><STRONG><a name="[25c]"></a>port_int_enable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>port_cpsr_save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>

<P><STRONG><a name="[240]"></a>port_cpsr_restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>

<P><STRONG><a name="[23f]"></a>port_clz</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>

<P><STRONG><a name="[19b]"></a>port_sched_start</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sched_start
</UL>

<P><STRONG><a name="[195]"></a>port_context_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_context_switch
</UL>

<P><STRONG><a name="[199]"></a>port_irq_context_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_context_switch
</UL>

<P><STRONG><a name="[18]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sleep_hmsm
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[25d]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_echo_buffer_copy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_push_pubInfo_to
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sign_get_clientid
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Sign_MQTT
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Ioctl
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_offline_subscribe
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha256_update
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_hmac_sha256
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotx_generate_sign_string
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotx_generate_sign_string
</UL>

<P><STRONG><a name="[25f]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[262]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetProductKey
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDeviceSecret
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDeviceName
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;example_subscribe
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;example_publish
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_line_parse
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_devinfo
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sign_get_clientid
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Sign_MQTT
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Ioctl
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetFirmwareVersion
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog_routine
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infra_strtok
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Publish_Simple
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_basic_thread
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_free
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_release
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_pub_wait_list_init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_pub_wait_list_deinit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBLISH
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_topic
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_release
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_firmware_version
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_devinfo
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Sign_MQTT
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Ioctl
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_offline_subscribe
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_offline_subs_list_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_offline_subs_list_deinit
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha256_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_hmac_sha256
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotx_generate_sign_string
</UL>

<P><STRONG><a name="[264]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e7]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_echo_status_set
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_parse_domain
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_is_link_broken
</UL>

<P><STRONG><a name="[95]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetProductKey
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDeviceSecret
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDeviceName
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_topic
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetFirmwareVersion
</UL>

<P><STRONG><a name="[94]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Subscribe
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Publish_Simple
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetProductKey
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDeviceSecret
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDeviceName
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;example_subscribe
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;example_publish
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_is_echo_expect
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_event_do_get
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_topic
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_rule
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_handle_is_identical_ex
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_subscribe
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_firmware_version
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_devinfo
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sign_get_clientid
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Sign_MQTT
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Ioctl
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_offline_subscribe
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetFirmwareVersion
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog_routine
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_net_init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infra_strtok
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_equals
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotx_generate_sign_string
</UL>

<P><STRONG><a name="[111]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_offline_subscribe
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infra_strtok
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_equals
</UL>

<P><STRONG><a name="[169]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_is_echo_expect
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_event_do_get
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_handle_is_identical_ex
</UL>

<P><STRONG><a name="[7a]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_parse_domain
</UL>

<P><STRONG><a name="[88]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[265]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[266]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[5d]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[267]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7f]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[14d]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[73]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[268]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[269]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[87]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[26a]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[14]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it_module.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>DHT11_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dht11_bus.o(i.DHT11_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DHT11_Init &rArr; DHT11_Mode_Out_PP &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Mode_Out_PP
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[17]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it_module.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it_module.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it_module.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI2_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it_module.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[12d]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mcu_init.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c9]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[90]"></a>HAL_Free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, osal_os.o(i.HAL_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = HAL_Free &rArr; tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;example_subscribe
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;example_publish
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_devinfo
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexDestroy
</UL>

<P><STRONG><a name="[d2]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 256 bytes, Stack size 20 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[92]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[8c]"></a>HAL_GPIO_Init</STRONG> (Thumb, 428 bytes, Stack size 20 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Mode_Out_PP
</UL>

<P><STRONG><a name="[8b]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Byte
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>

<P><STRONG><a name="[93]"></a>HAL_GetDeviceName</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, osal_os.o(i.HAL_GetDeviceName))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GetDeviceName &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_basic_thread
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_firmware_version
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_devinfo
</UL>

<P><STRONG><a name="[96]"></a>HAL_GetDeviceSecret</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, osal_os.o(i.HAL_GetDeviceSecret))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GetDeviceSecret &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_basic_thread
</UL>

<P><STRONG><a name="[97]"></a>HAL_GetFirmwareVersion</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, osal_os.o(i.HAL_GetFirmwareVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GetFirmwareVersion &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_firmware_version
</UL>

<P><STRONG><a name="[98]"></a>HAL_GetProductKey</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, osal_os.o(i.HAL_GetProductKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GetProductKey &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_basic_thread
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_firmware_version
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_devinfo
</UL>

<P><STRONG><a name="[8f]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
</UL>

<P><STRONG><a name="[13b]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[99]"></a>HAL_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[9b]"></a>HAL_InitTick</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[9f]"></a>HAL_Malloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, osal_os.o(i.HAL_Malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = HAL_Malloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;example_subscribe
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;example_publish
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_devinfo
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexCreate
</UL>

<P><STRONG><a name="[9c]"></a>HAL_MspInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32l4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a1]"></a>HAL_MutexCreate</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, osal_os.o(i.HAL_MutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = HAL_MutexCreate &rArr; HAL_Malloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_offline_subs_list_init
</UL>

<P><STRONG><a name="[a3]"></a>HAL_MutexDestroy</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, osal_os.o(i.HAL_MutexDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = HAL_MutexDestroy &rArr; HAL_Free &rArr; tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Printf
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_release
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_offline_subs_list_deinit
</UL>

<P><STRONG><a name="[a6]"></a>HAL_MutexLock</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, osal_os.o(i.HAL_MutexLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Printf
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_wait_CONNACK
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive_sub
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_next_packetid
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_client_state
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_deliver_message
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotx_mqtt_event_handle_sub
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTRePublish
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPuback
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTKeepalive
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_yield
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_offline_subscribe
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_deal_offline_subs
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_cycle
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
</UL>

<P><STRONG><a name="[a8]"></a>HAL_MutexUnlock</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, osal_os.o(i.HAL_MutexUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = HAL_MutexUnlock &rArr; tos_mutex_post &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Printf
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_wait_CONNACK
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive_sub
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_next_packetid
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_client_state
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_deliver_message
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotx_mqtt_event_handle_sub
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTRePublish
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPuback
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTKeepalive
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_yield
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_offline_subscribe
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_deal_offline_subs
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_cycle
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
</UL>

<P><STRONG><a name="[d3]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[d5]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[9e]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[9a]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[140]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[13a]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[13f]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a5]"></a>HAL_Printf</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, osal_os.o(i.HAL_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_basic_thread
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;example_subscribe
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;example_publish
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;example_message_arrive
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;example_event_handle
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexDestroy
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog_routine
</UL>

<P><STRONG><a name="[141]"></a>HAL_RCCEx_EnableMSIPLLMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_EnableMSIPLLMode))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ad]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 894 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[af]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b2]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[b1]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[b3]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[b0]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[b4]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1660 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[9d]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[b6]"></a>HAL_SleepMs</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, osal_os.o(i.HAL_SleepMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = HAL_SleepMs &rArr; tos_sleep_hmsm &rArr; tos_task_delay &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sleep_hmsm
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_reconnect
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_connect
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_release
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_connect
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_cycle
</UL>

<P><STRONG><a name="[b8]"></a>HAL_Snprintf</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, osal_os.o(i.HAL_Snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_Snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;example_subscribe
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;example_publish
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_firmware_version
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_devinfo
</UL>

<P><STRONG><a name="[ba]"></a>HAL_TCP_Destroy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, osal_tcp_module.o(i.HAL_TCP_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TCP_Destroy &rArr; tos_sal_module_close
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sal_module_close
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_tcp
</UL>

<P><STRONG><a name="[bc]"></a>HAL_TCP_Establish</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, osal_tcp_module.o(i.HAL_TCP_Establish))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TCP_Establish &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sal_module_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sal_module_connect
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_tcp
</UL>

<P><STRONG><a name="[c1]"></a>HAL_TCP_Read</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, osal_tcp_module.o(i.HAL_TCP_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_TCP_Read &rArr; tos_sal_module_recv_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sal_module_recv_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tcp
</UL>

<P><STRONG><a name="[c3]"></a>HAL_TCP_Write</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, osal_tcp_module.o(i.HAL_TCP_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TCP_Write &rArr; tos_sal_module_send
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sal_module_send
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tcp
</UL>

<P><STRONG><a name="[cb]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>HAL_UART_DeInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_UART_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_hal_uart_deinit
</UL>

<P><STRONG><a name="[ca]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[c7]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[cd]"></a>HAL_UART_Init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[c6]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, usart.o(i.HAL_UART_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_hal_uart_deinit
</UL>

<P><STRONG><a name="[ce]"></a>HAL_UART_MspInit</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d7]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[d6]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l4xx_it_module.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; tos_at_uart_write_byte &rArr; tos_sem_post &rArr; sem_do_post &rArr; pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_uart_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[d9]"></a>HAL_UART_Transmit</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_hal_uart_write
</UL>

<P><STRONG><a name="[142]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[db]"></a>HAL_UptimeMs</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, osal_timer.o(i.HAL_UptimeMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = HAL_UptimeMs &rArr; tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_spend
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_is_expired
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_start
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_left
</UL>

<P><STRONG><a name="[dd]"></a>HAL_Vsnprintf</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, osal_os.o(i.HAL_Vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_Vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog_routine
</UL>

<P><STRONG><a name="[12]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it_module.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>IIC_Start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, oled.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Data
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Command
</UL>

<P><STRONG><a name="[df]"></a>IIC_Stop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, oled.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Data
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Command
</UL>

<P><STRONG><a name="[e0]"></a>IIC_Wait_Ack</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, oled.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Data
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Command
</UL>

<P><STRONG><a name="[e1]"></a>IOT_Ioctl</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, infra_compat.o(i.IOT_Ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IOT_Ioctl &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
</UL>

<P><STRONG><a name="[e3]"></a>IOT_MQTT_Construct</STRONG> (Thumb, 1534 bytes, Stack size 360 bytes, mqtt_api.o(i.IOT_MQTT_Construct))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416 + Unknown Stack Size
<LI>Call Chain = IOT_MQTT_Construct &rArr; IOT_Sign_MQTT &rArr; _iotx_generate_sign_string &rArr; utils_hmac_sha256 &rArr; utils_sha256_finish &rArr; utils_sha256_update &rArr; utils_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetProductKey
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDeviceSecret
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDeviceName
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_release
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_connect
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_event_callback
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sign_get_clientid
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Sign_MQTT
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Ioctl
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_report_funcs
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_basic_thread
</UL>

<P><STRONG><a name="[ee]"></a>IOT_MQTT_Destroy</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mqtt_api.o(i.IOT_MQTT_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = IOT_MQTT_Destroy &rArr; wrapper_mqtt_release &rArr; iotx_mc_disconnect &rArr; MQTTDisconnect &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_release
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_basic_thread
</UL>

<P><STRONG><a name="[68]"></a>IOT_MQTT_Publish_Simple</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, mqtt_api.o(i.IOT_MQTT_Publish_Simple))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = IOT_MQTT_Publish_Simple &rArr; wrapper_mqtt_publish &rArr; iotx_mc_check_topic &rArr; iotx_mc_check_rule &rArr; LITE_syslog &rArr; LITE_syslog_routine &rArr; HAL_Vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_publish
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;example_publish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_api.o(i.iotx_mqtt_report_funcs)
</UL>
<P><STRONG><a name="[f0]"></a>IOT_MQTT_Subscribe</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, mqtt_api.o(i.IOT_MQTT_Subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = IOT_MQTT_Subscribe &rArr; wrapper_mqtt_subscribe &rArr; iotx_mc_check_topic &rArr; iotx_mc_check_rule &rArr; LITE_syslog &rArr; LITE_syslog_routine &rArr; HAL_Vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_subscribe
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_offline_subscribe
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;example_subscribe
</UL>

<P><STRONG><a name="[f3]"></a>IOT_MQTT_Yield</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mqtt_api.o(i.IOT_MQTT_Yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = IOT_MQTT_Yield &rArr; wrapper_mqtt_yield &rArr; iotx_mc_keepalive &rArr; iotx_mc_handle_reconnect &rArr; iotx_mc_attempt_reconnect &rArr; wrapper_mqtt_connect &rArr; _mqtt_connect &rArr; iotx_mc_wait_CONNACK &rArr; iotx_mc_read_packet &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_yield
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_basic_thread
</UL>

<P><STRONG><a name="[e5]"></a>IOT_Sign_MQTT</STRONG> (Thumb, 498 bytes, Stack size 96 bytes, dev_sign_mqtt.o(i.IOT_Sign_MQTT))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = IOT_Sign_MQTT &rArr; _iotx_generate_sign_string &rArr; utils_hmac_sha256 &rArr; utils_sha256_finish &rArr; utils_sha256_update &rArr; utils_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sign_get_clientid
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotx_generate_sign_string
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
</UL>

<P><STRONG><a name="[f7]"></a>LITE_get_loglevel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, infra_log.o(i.LITE_get_loglevel))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog_routine
</UL>

<P><STRONG><a name="[e4]"></a>LITE_syslog</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, infra_log.o(i.LITE_syslog))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LITE_syslog &rArr; LITE_syslog_routine &rArr; HAL_Vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog_routine
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Subscribe
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Publish_Simple
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Destroy
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_wait_CONNACK
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_connect_params
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_push_pubInfo_to
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive_sub
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_SUBACK
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBLISH
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_CONNACK
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_reconnect
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_disconnect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_deliver_message
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_topic
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_rule
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_attempt_reconnect
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_connect
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotx_mqtt_event_handle_sub
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTKeepalive
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_yield
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_subscribe
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_release
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_publish
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_connect
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_firmware_version
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_devinfo
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_report_funcs
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_net_write
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_net_read
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_net_disconnect
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_net_connect
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_tcp
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_tcp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_net_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_cycle
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
</UL>

<P><STRONG><a name="[f6]"></a>LITE_syslog_routine</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, infra_log.o(i.LITE_syslog_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LITE_syslog_routine &rArr; HAL_Vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Printf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Vsnprintf
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_get_loglevel
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
</UL>

<P><STRONG><a name="[50]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l4xx_it_module.o(i.LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = LPUART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_enter
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[fa]"></a>MQTTConnect</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, iotx_mqtt_client.o(i.MQTTConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = MQTTConnect &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reset_send_buffer
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_connect_length
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_send_buffer
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_connect
</UL>

<P><STRONG><a name="[102]"></a>MQTTDeserialize_ack</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, mqttdeserializepublish.o(i.MQTTDeserialize_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MQTTDeserialize_ack &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBACK
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_unsuback
</UL>

<P><STRONG><a name="[106]"></a>MQTTDeserialize_connack</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, mqttconnectclient.o(i.MQTTDeserialize_connack))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MQTTDeserialize_connack &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_CONNACK
</UL>

<P><STRONG><a name="[107]"></a>MQTTDeserialize_publish</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, mqttdeserializepublish.o(i.MQTTDeserialize_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MQTTDeserialize_publish &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMQTTLenString
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBLISH
</UL>

<P><STRONG><a name="[109]"></a>MQTTDeserialize_suback</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, mqttsubscribeclient.o(i.MQTTDeserialize_suback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MQTTDeserialize_suback &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_SUBACK
</UL>

<P><STRONG><a name="[10a]"></a>MQTTDeserialize_unsuback</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, mqttunsubscribeclient.o(i.MQTTDeserialize_unsuback))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MQTTDeserialize_unsuback &rArr; MQTTDeserialize_ack &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_UNSUBACK
</UL>

<P><STRONG><a name="[10f]"></a>MQTTPacket_decode</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, mqttpacket.o(i.MQTTPacket_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MQTTPacket_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>

<P><STRONG><a name="[104]"></a>MQTTPacket_decodeBuf</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mqttpacket.o(i.MQTTPacket_decodeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
</UL>

<P><STRONG><a name="[11e]"></a>MQTTPacket_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, mqttpacket.o(i.MQTTPacket_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
</UL>

<P><STRONG><a name="[110]"></a>MQTTPacket_equals</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, mqttpacket.o(i.MQTTPacket_equals))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MQTTPacket_equals &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_deliver_message
</UL>

<P><STRONG><a name="[121]"></a>MQTTPacket_len</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mqttpacket.o(i.MQTTPacket_len))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[11a]"></a>MQTTPublish</STRONG> (Thumb, 398 bytes, Stack size 72 bytes, iotx_mqtt_client.o(i.MQTTPublish))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = MQTTPublish &rArr; iotx_mc_push_pubInfo_to &rArr; LITE_syslog &rArr; LITE_syslog_routine &rArr; HAL_Vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_push_pubInfo_to
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reset_send_buffer
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_send_buffer
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_publish
</UL>

<P><STRONG><a name="[119]"></a>MQTTSerialize_ack</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, mqttserializepublish.o(i.MQTTSerialize_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MQTTSerialize_ack &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPuback
</UL>

<P><STRONG><a name="[fd]"></a>MQTTSerialize_connect</STRONG> (Thumb, 370 bytes, Stack size 40 bytes, mqttconnectclient.o(i.MQTTSerialize_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MQTTSerialize_connect &rArr; writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
</UL>

<P><STRONG><a name="[120]"></a>MQTTSerialize_connectLength</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, mqttconnectclient.o(i.MQTTSerialize_connectLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MQTTSerialize_connectLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[10c]"></a>MQTTSerialize_disconnect</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mqttconnectclient.o(i.MQTTSerialize_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MQTTSerialize_disconnect &rArr; MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
</UL>

<P><STRONG><a name="[10e]"></a>MQTTSerialize_pingreq</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mqttconnectclient.o(i.MQTTSerialize_pingreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MQTTSerialize_pingreq &rArr; MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTKeepalive
</UL>

<P><STRONG><a name="[11b]"></a>MQTTSerialize_publish</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, mqttserializepublish.o(i.MQTTSerialize_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publishLength
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
</UL>

<P><STRONG><a name="[126]"></a>MQTTSerialize_publishLength</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, mqttserializepublish.o(i.MQTTSerialize_publishLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
</UL>

<P><STRONG><a name="[127]"></a>MQTTSerialize_subscribe</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, mqttsubscribeclient.o(i.MQTTSerialize_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MQTTSerialize_subscribe &rArr; MQTTSerialize_subscribeLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribeLength
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
</UL>

<P><STRONG><a name="[128]"></a>MQTTSerialize_subscribeLength</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, mqttsubscribeclient.o(i.MQTTSerialize_subscribeLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MQTTSerialize_subscribeLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
</UL>

<P><STRONG><a name="[125]"></a>MQTTSerialize_zero</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, mqttconnectclient.o(i.MQTTSerialize_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_pingreq
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_disconnect
</UL>

<P><STRONG><a name="[124]"></a>MQTTstrlen</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, mqttpacket.o(i.MQTTstrlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribeLength
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publishLength
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
</UL>

<P><STRONG><a name="[12b]"></a>MX_GPIO_Init</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_GPIO_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[12c]"></a>MX_LPUART1_UART_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usart.o(i.MX_LPUART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_LPUART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_hal_uart_init
</UL>

<P><STRONG><a name="[12e]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_hal_uart_init
</UL>

<P><STRONG><a name="[12f]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_hal_uart_init
</UL>

<P><STRONG><a name="[130]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_hal_uart_init
</UL>

<P><STRONG><a name="[13]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it_module.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it_module.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[131]"></a>OLED_Clear</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, oled.o(i.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_Clear &rArr; OLED_WR_Byte &rArr; Write_IIC_Data &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[133]"></a>OLED_Init</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, oled.o(i.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OLED_Init &rArr; OLED_Clear &rArr; OLED_WR_Byte &rArr; Write_IIC_Data &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[134]"></a>OLED_Set_Pos</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, oled.o(i.OLED_Set_Pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_Set_Pos &rArr; OLED_WR_Byte &rArr; Write_IIC_Data &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>

<P><STRONG><a name="[135]"></a>OLED_ShowChar</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, oled.o(i.OLED_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte &rArr; Write_IIC_Data &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>

<P><STRONG><a name="[136]"></a>OLED_ShowChinese</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, oled.o(i.OLED_ShowChinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OLED_ShowChinese &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte &rArr; Write_IIC_Data &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[137]"></a>OLED_ShowString</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, oled.o(i.OLED_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte &rArr; Write_IIC_Data &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[132]"></a>OLED_WR_Byte</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, oled.o(i.OLED_WR_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OLED_WR_Byte &rArr; Write_IIC_Data &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Data
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
</UL>

<P><STRONG><a name="[16]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it_module.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SysTick_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l4xx_it_module.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; tos_tick_handler &rArr; tick_update &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_enter
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[13e]"></a>SystemClock_Config</STRONG> (Thumb, 214 bytes, Stack size 184 bytes, mcu_init.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_EnableMSIPLLMode
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[5b]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, system_stm32l4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(.text)
</UL>
<P><STRONG><a name="[d0]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d1]"></a>UART_CheckIdleState</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[cf]"></a>UART_SetConfig</STRONG> (Thumb, 1000 bytes, Stack size 40 bytes, stm32l4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[da]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[3e]"></a>USART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it_module.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it_module.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it_module.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[143]"></a>Write_IIC_Byte</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, oled.o(i.Write_IIC_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Data
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Command
</UL>

<P><STRONG><a name="[139]"></a>Write_IIC_Command</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, oled.o(i.Write_IIC_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Write_IIC_Command &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Byte
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[138]"></a>Write_IIC_Data</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, oled.o(i.Write_IIC_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Write_IIC_Data &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Byte
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[144]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[26c]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[be]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_entry
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_do_exec
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_reconnect_init
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_parse_domain
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TCP_Establish
</UL>

<P><STRONG><a name="[26d]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[26e]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[146]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[26f]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[bd]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TCP_Establish
</UL>

<P><STRONG><a name="[270]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[271]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[147]"></a>__0vprintf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[272]"></a>__1vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[273]"></a>__2vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[274]"></a>__c89vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[ac]"></a>vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Printf
</UL>

<P><STRONG><a name="[148]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[275]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[276]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[277]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[b9]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_do_exec
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Vsnprintf
</UL>

<P><STRONG><a name="[278]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[279]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[27a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[f5]"></a>_iotx_generate_sign_string</STRONG> (Thumb, 340 bytes, Stack size 320 bytes, dev_sign_mqtt.o(i._iotx_generate_sign_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = _iotx_generate_sign_string &rArr; utils_hmac_sha256 &rArr; utils_sha256_finish &rArr; utils_sha256_update &rArr; utils_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_hmac_sha256
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hex2str
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Sign_MQTT
</UL>

<P><STRONG><a name="[153]"></a>_mqtt_cycle</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, iotx_mqtt_client.o(i._mqtt_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = _mqtt_cycle &rArr; iotx_mc_cycle &rArr; iotx_mc_read_packet &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SleepMs
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_is_expired
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_left
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_yield
</UL>

<P><STRONG><a name="[e8]"></a>_sign_get_clientid</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, dev_sign_mqtt.o(i._sign_get_clientid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _sign_get_clientid &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Sign_MQTT
</UL>

<P><STRONG><a name="[71]"></a>application_entry</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, aliyun_iotkit_csdk_mqtt.o(i.application_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = application_entry &rArr; mqtt_basic_thread &rArr; IOT_MQTT_Construct &rArr; IOT_Sign_MQTT &rArr; _iotx_generate_sign_string &rArr; utils_hmac_sha256 &rArr; utils_sha256_finish &rArr; utils_sha256_update &rArr; utils_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_sal_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_join_ap
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_basic_thread
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[165]"></a>at_delay</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, tos_at_utils.o(i.at_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = at_delay &rArr; tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_getchar
</UL>

<P><STRONG><a name="[170]"></a>at_timer_countdown</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tos_at_utils.o(i.at_timer_countdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = at_timer_countdown &rArr; tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
</UL>

<P><STRONG><a name="[234]"></a>at_timer_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_at_utils.o(i.at_timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[171]"></a>at_timer_is_expired</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tos_at_utils.o(i.at_timer_is_expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = at_timer_is_expired &rArr; tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_timer_remain
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
</UL>

<P><STRONG><a name="[172]"></a>at_timer_remain</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tos_at_utils.o(i.at_timer_remain))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = at_timer_remain &rArr; at_timer_is_expired &rArr; tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_timer_is_expired
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
</UL>

<P><STRONG><a name="[192]"></a>board_init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, mcu_init.o(i.board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = board_init &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>bufchar</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mqttpacket.o(i.bufchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bufchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqttpacket.o(i.MQTTPacket_decodeBuf)
</UL>
<P><STRONG><a name="[194]"></a>cpu_context_switch</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(i.cpu_context_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = cpu_context_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
</UL>

<P><STRONG><a name="[196]"></a>cpu_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tos_cpu.o(i.cpu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cpu_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[198]"></a>cpu_irq_context_switch</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(i.cpu_irq_context_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = cpu_irq_context_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
</UL>

<P><STRONG><a name="[19a]"></a>cpu_sched_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_cpu.o(i.cpu_sched_start))
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_sched_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
</UL>

<P><STRONG><a name="[197]"></a>cpu_systick_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tos_cpu.o(i.cpu_systick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cpu_systick_init &rArr; port_systick_config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_priority_set
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_config
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
</UL>

<P><STRONG><a name="[24d]"></a>cpu_task_stk_init</STRONG> (Thumb, 216 bytes, Stack size 20 bytes, tos_cpu.o(i.cpu_task_stk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cpu_task_stk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[15d]"></a>esp8266_join_ap</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, esp8266.o(i.esp8266_join_ap))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = esp8266_join_ap &rArr; tos_at_cmd_exec_until &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec_until
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_entry
</UL>

<P><STRONG><a name="[15c]"></a>esp8266_sal_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, esp8266.o(i.esp8266_sal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = esp8266_sal_init &rArr; tos_at_init &rArr; at_recv_cache_init &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sal_module_register
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sal_module_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_entry
</UL>

<P><STRONG><a name="[6e]"></a>example_event_handle</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mqtt_example.o(i.example_event_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = example_event_handle &rArr; HAL_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_example.o(i.mqtt_basic_thread)
</UL>
<P><STRONG><a name="[67]"></a>example_message_arrive</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, mqtt_example.o(i.example_message_arrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = example_message_arrive &rArr; HAL_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_example.o(i.example_subscribe)
</UL>
<P><STRONG><a name="[1b5]"></a>example_publish</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, mqtt_example.o(i.example_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = example_publish &rArr; IOT_MQTT_Publish_Simple &rArr; wrapper_mqtt_publish &rArr; iotx_mc_check_topic &rArr; iotx_mc_check_rule &rArr; LITE_syslog &rArr; LITE_syslog_routine &rArr; HAL_Vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Publish_Simple
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Printf
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_basic_thread
</UL>

<P><STRONG><a name="[1b6]"></a>example_subscribe</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, mqtt_example.o(i.example_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = example_subscribe &rArr; IOT_MQTT_Subscribe &rArr; wrapper_mqtt_subscribe &rArr; iotx_mc_check_topic &rArr; iotx_mc_check_rule &rArr; LITE_syslog &rArr; LITE_syslog_routine &rArr; HAL_Vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Subscribe
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Printf
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_basic_thread
</UL>

<P><STRONG><a name="[65]"></a>fputc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mcu_init.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0printf)
<LI> printfa.o(i.__0vprintf)
</UL>
<P><STRONG><a name="[1b8]"></a>infra_strtok</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, infra_string.o(i.infra_strtok))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = infra_strtok &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_topic
</UL>

<P><STRONG><a name="[ed]"></a>iotx_event_callback</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, infra_compat.o(i.iotx_event_callback))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
</UL>

<P><STRONG><a name="[6c]"></a>iotx_net_connect</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, infra_net.o(i.iotx_net_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = iotx_net_connect &rArr; connect_tcp &rArr; LITE_syslog &rArr; LITE_syslog_routine &rArr; HAL_Vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> infra_net.o(i.iotx_net_init)
</UL>
<P><STRONG><a name="[6b]"></a>iotx_net_disconnect</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, infra_net.o(i.iotx_net_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = iotx_net_disconnect &rArr; disconnect_tcp &rArr; LITE_syslog &rArr; LITE_syslog_routine &rArr; HAL_Vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> infra_net.o(i.iotx_net_init)
</UL>
<P><STRONG><a name="[1cf]"></a>iotx_net_init</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, infra_net.o(i.iotx_net_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = iotx_net_init &rArr; LITE_syslog &rArr; LITE_syslog_routine &rArr; HAL_Vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
</UL>

<P><STRONG><a name="[1db]"></a>iotx_report_devinfo</STRONG> (Thumb, 376 bytes, Stack size 232 bytes, infra_report.o(i.iotx_report_devinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = iotx_report_devinfo &rArr; HAL_Malloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetProductKey
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDeviceName
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_id
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_report_funcs
</UL>

<P><STRONG><a name="[1dc]"></a>iotx_report_firmware_version</STRONG> (Thumb, 346 bytes, Stack size 328 bytes, infra_report.o(i.iotx_report_firmware_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = iotx_report_firmware_version &rArr; LITE_syslog &rArr; LITE_syslog_routine &rArr; HAL_Vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetProductKey
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDeviceName
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetFirmwareVersion
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_id
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_report_funcs
</UL>

<P><STRONG><a name="[1dd]"></a>iotx_report_id</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, infra_report.o(i.iotx_report_id))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_firmware_version
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_devinfo
</UL>

<P><STRONG><a name="[1da]"></a>iotx_report_mid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, infra_report.o(i.iotx_report_mid))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_report_funcs
</UL>

<P><STRONG><a name="[1d9]"></a>iotx_set_report_func</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, infra_report.o(i.iotx_set_report_func))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_report_funcs
</UL>

<P><STRONG><a name="[ff]"></a>iotx_time_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, infra_timer.o(i.iotx_time_init))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_wait_CONNACK
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTRePublish
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPuback
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTKeepalive
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_cycle
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
</UL>

<P><STRONG><a name="[155]"></a>iotx_time_left</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, infra_timer.o(i.iotx_time_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = iotx_time_left &rArr; utils_time_is_expired &rArr; HAL_UptimeMs &rArr; tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UptimeMs
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_is_expired
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_cycle
</UL>

<P><STRONG><a name="[116]"></a>iotx_time_start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, infra_timer.o(i.iotx_time_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = iotx_time_start &rArr; HAL_UptimeMs &rArr; tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UptimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_push_pubInfo_to
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
</UL>

<P><STRONG><a name="[1df]"></a>knl_idle_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, tos_sys.o(i.knl_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = knl_idle_init &rArr; tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[215]"></a>knl_is_idle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_idle))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[1e2]"></a>knl_is_inirq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_inirq))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
</UL>

<P><STRONG><a name="[1e3]"></a>knl_is_sched_locked</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_sched_locked))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
</UL>

<P><STRONG><a name="[1e6]"></a>knl_is_self</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_self))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>

<P><STRONG><a name="[23b]"></a>knl_object_alloc_is_static</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_sys.o(i.knl_object_alloc_is_static))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_destroy
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_destroy
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>

<P><STRONG><a name="[21f]"></a>knl_object_alloc_reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sys.o(i.knl_object_alloc_reset))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_destroy
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_destroy
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
</UL>

<P><STRONG><a name="[23a]"></a>knl_object_alloc_set_static</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sys.o(i.knl_object_alloc_set_static))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_create
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_create
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[21e]"></a>knl_object_deinit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sys.o(i.knl_object_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_destroy
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_destroy
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
</UL>

<P><STRONG><a name="[239]"></a>knl_object_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_sys.o(i.knl_object_init))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_create
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_create
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create_max
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[213]"></a>knl_object_verify</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_sys.o(i.knl_object_verify))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_full
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_empty
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_destroy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push_stream
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop_stream
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_destroy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>

<P><STRONG><a name="[1e1]"></a>knl_sched</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tos_sys.o(i.knl_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = knl_sched &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
</UL>

<P><STRONG><a name="[5a]"></a>main</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = main &rArr; board_init &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1eb]"></a>mmheap_init_with_pool</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tos_mmheap.o(i.mmheap_init_with_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = mmheap_init_with_pool &rArr; tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_ctl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[15e]"></a>mqtt_basic_thread</STRONG> (Thumb, 176 bytes, Stack size 80 bytes, mqtt_example.o(i.mqtt_basic_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = mqtt_basic_thread &rArr; IOT_MQTT_Construct &rArr; IOT_Sign_MQTT &rArr; _iotx_generate_sign_string &rArr; utils_hmac_sha256 &rArr; utils_sha256_finish &rArr; utils_sha256_update &rArr; utils_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Yield
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Destroy
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Printf
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetProductKey
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDeviceSecret
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDeviceName
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;example_subscribe
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;example_publish
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_entry
</UL>

<P><STRONG><a name="[1f0]"></a>mutex_release</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tos_mutex.o(i.mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_release
</UL>

<P><STRONG><a name="[1e8]"></a>osKernelInitialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = osKernelInitialize &rArr; tos_knl_init &rArr; mmheap_init_with_pool &rArr; tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errno_knl2cmsis
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ea]"></a>osKernelStart</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = osKernelStart &rArr; tos_knl_start
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errno_knl2cmsis
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e9]"></a>osThreadCreate</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = osThreadCreate &rArr; tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priority_cmsis2knl
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f6]"></a>pend_highest_pending_prio_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tos_pend.o(i.pend_highest_pending_prio_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_highest_pending_prio_get
</UL>

<P><STRONG><a name="[248]"></a>pend_highest_pending_task_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_pend.o(i.pend_highest_pending_task_get))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
</UL>

<P><STRONG><a name="[1f8]"></a>pend_is_nopending</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_pend.o(i.pend_is_nopending))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pend_is_nopending
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
</UL>

<P><STRONG><a name="[1f9]"></a>pend_list_adjust</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tos_pend.o(i.pend_list_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pend_list_adjust &rArr; pend_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[1fc]"></a>pend_list_remove</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tos_pend.o(i.pend_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pend_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[1fd]"></a>pend_object_deinit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_pend.o(i.pend_object_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pend_object_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
</UL>

<P><STRONG><a name="[1ff]"></a>pend_object_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_pend.o(i.pend_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pend_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create_max
</UL>

<P><STRONG><a name="[247]"></a>pend_state2errno</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tos_pend.o(i.pend_state2errno))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
</UL>

<P><STRONG><a name="[200]"></a>pend_task_block</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, tos_pend.o(i.pend_task_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
</UL>

<P><STRONG><a name="[203]"></a>pend_task_wakeup</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tos_pend.o(i.pend_task_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_one
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
</UL>

<P><STRONG><a name="[206]"></a>pend_wakeup</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tos_pend.o(i.pend_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_one
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
</UL>

<P><STRONG><a name="[1f1]"></a>pend_wakeup_all</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, tos_pend.o(i.pend_wakeup_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup
</UL>

<P><STRONG><a name="[207]"></a>pend_wakeup_one</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tos_pend.o(i.pend_wakeup_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = pend_wakeup_one &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup
</UL>

<P><STRONG><a name="[19d]"></a>port_systick_config</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, port_c.o(i.port_systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = port_systick_config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
</UL>

<P><STRONG><a name="[19c]"></a>port_systick_priority_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, port_c.o(i.port_systick_priority_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = port_systick_priority_set &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
</UL>

<P><STRONG><a name="[103]"></a>readChar</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mqttpacket.o(i.readChar))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
</UL>

<P><STRONG><a name="[105]"></a>readInt</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, mqttpacket.o(i.readInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = readInt
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMQTTLenString
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
</UL>

<P><STRONG><a name="[108]"></a>readMQTTLenString</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, mqttpacket.o(i.readMQTTLenString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readMQTTLenString &rArr; readInt
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
</UL>

<P><STRONG><a name="[205]"></a>readyqueue_add</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tos_sched.o(i.readyqueue_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>

<P><STRONG><a name="[20b]"></a>readyqueue_add_head</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, tos_sched.o(i.readyqueue_add_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readyqueue_add_head
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_mark
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
</UL>

<P><STRONG><a name="[20a]"></a>readyqueue_add_tail</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tos_sched.o(i.readyqueue_add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[1e5]"></a>readyqueue_highest_ready_task_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_highest_ready_task_get))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
</UL>

<P><STRONG><a name="[242]"></a>readyqueue_init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_init))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[201]"></a>readyqueue_remove</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tos_sched.o(i.readyqueue_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_highest_get
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[1de]"></a>task_free_all</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tos_task.o(i.task_free_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = task_free_all &rArr; task_free &rArr; tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_entry
</UL>

<P><STRONG><a name="[202]"></a>tick_list_add</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tos_tick.o(i.tick_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
</UL>

<P><STRONG><a name="[204]"></a>tick_list_remove</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tos_tick.o(i.tick_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = tick_list_remove &rArr; tick_task_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[224]"></a>tick_update</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, tos_tick.o(i.tick_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tick_update &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
</UL>

<P><STRONG><a name="[243]"></a>timer_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_timer.o(i.timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[227]"></a>timer_update</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, tos_timer.o(i.timer_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = timer_update &rArr; timer_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
</UL>

<P><STRONG><a name="[1a2]"></a>tos_at_channel_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, tos_at.o(i.tos_at_channel_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tos_at_channel_alloc &rArr; at_channel_construct &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_construct
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_connect
</UL>

<P><STRONG><a name="[1a0]"></a>tos_at_channel_free</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tos_at.o(i.tos_at_channel_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tos_at_channel_free &rArr; tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_destroy
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_get
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_connect
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_close
</UL>

<P><STRONG><a name="[1b0]"></a>tos_at_channel_is_working</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tos_at.o(i.tos_at_channel_is_working))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tos_at_channel_is_working &rArr; at_channel_get
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_sendto
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_send
</UL>

<P><STRONG><a name="[1ad]"></a>tos_at_channel_read_timed</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, tos_at.o(i.tos_at_channel_read_timed))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tos_at_channel_read_timed &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop_stream
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_timer_remain
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_timer_is_expired
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_timer_countdown
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_recvfrom_timeout
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_recv_timeout
</UL>

<P><STRONG><a name="[1b2]"></a>tos_at_channel_set_broken</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tos_at.o(i.tos_at_channel_set_broken))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tos_at_channel_set_broken &rArr; at_channel_get
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_sendto
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_send
</UL>

<P><STRONG><a name="[1a7]"></a>tos_at_channel_write</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, tos_at.o(i.tos_at_channel_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tos_at_channel_write &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push_stream
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_incoming_data_process
</UL>

<P><STRONG><a name="[19f]"></a>tos_at_cmd_exec</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, tos_at.o(i.tos_at_cmd_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_echo_attach
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_do_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_sendto
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_send_mode_set
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_send
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_restore
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_parse_domain
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_net_mode_set
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_multilink_set
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_echo_close
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_close
</UL>

<P><STRONG><a name="[1a4]"></a>tos_at_cmd_exec_until</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, tos_at.o(i.tos_at_cmd_exec_until))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tos_at_cmd_exec_until &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_echo_attach
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_do_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_join_ap
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_connect
</UL>

<P><STRONG><a name="[1a3]"></a>tos_at_echo_create</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, tos_at.o(i.tos_at_echo_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tos_at_echo_create
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_join_ap
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_sendto
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_send_mode_set
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_send
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_restore
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_parse_domain
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_net_mode_set
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_multilink_set
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_echo_close
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_connect
</UL>

<P><STRONG><a name="[1b1]"></a>tos_at_global_lock_pend</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tos_at.o(i.tos_at_global_lock_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = tos_at_global_lock_pend &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_sendto
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_send
</UL>

<P><STRONG><a name="[1b3]"></a>tos_at_global_lock_post</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tos_at.o(i.tos_at_global_lock_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tos_at_global_lock_post &rArr; tos_mutex_post &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_sendto
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_send
</UL>

<P><STRONG><a name="[1ae]"></a>tos_at_init</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, tos_at.o(i.tos_at_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tos_at_init &rArr; at_recv_cache_init &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_destroy
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_create
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_timer_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_cache_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_cache_deinit
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_event_table_set
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_hal_uart_init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_hal_uart_deinit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_sal_init
</UL>

<P><STRONG><a name="[1b4]"></a>tos_at_raw_data_send_until</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, tos_at.o(i.tos_at_raw_data_send_until))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = tos_at_raw_data_send_until &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_send
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_echo_attach
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_sendto
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_send
</UL>

<P><STRONG><a name="[1a6]"></a>tos_at_uart_read</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, tos_at.o(i.tos_at_uart_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tos_at_uart_read &rArr; at_uart_getchar &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_incoming_data_process
</UL>

<P><STRONG><a name="[d8]"></a>tos_at_uart_write_byte</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tos_at.o(i.tos_at_uart_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tos_at_uart_write_byte &rArr; tos_sem_post &rArr; sem_do_post &rArr; pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[161]"></a>tos_chr_fifo_create</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tos_char_fifo.o(i.tos_chr_fifo_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tos_chr_fifo_create &rArr; tos_ring_q_create
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_alloc_set_static
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_construct
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[22b]"></a>tos_chr_fifo_destroy</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tos_char_fifo.o(i.tos_chr_fifo_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tos_chr_fifo_destroy &rArr; tos_ring_q_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_deinit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_alloc_reset
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_alloc_is_static
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_free
</UL>

<P><STRONG><a name="[175]"></a>tos_chr_fifo_pop</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tos_char_fifo.o(i.tos_chr_fifo_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tos_chr_fifo_pop &rArr; tos_ring_q_dequeue &rArr; tos_ring_q_is_empty &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_getchar
</UL>

<P><STRONG><a name="[22e]"></a>tos_chr_fifo_pop_stream</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, tos_char_fifo.o(i.tos_chr_fifo_pop_stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tos_chr_fifo_pop_stream &rArr; tos_ring_q_dequeue &rArr; tos_ring_q_is_empty &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
</UL>

<P><STRONG><a name="[237]"></a>tos_chr_fifo_push</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tos_char_fifo.o(i.tos_chr_fifo_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tos_chr_fifo_push &rArr; tos_ring_q_enqueue &rArr; tos_ring_q_is_full &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_uart_write_byte
</UL>

<P><STRONG><a name="[22f]"></a>tos_chr_fifo_push_stream</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, tos_char_fifo.o(i.tos_chr_fifo_push_stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tos_chr_fifo_push_stream &rArr; tos_ring_q_enqueue &rArr; tos_ring_q_is_full &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_write
</UL>

<P><STRONG><a name="[1b7]"></a>tos_cpu_clz</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_cpu.o(i.tos_cpu_clz))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_fls
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_highest_get
</UL>

<P><STRONG><a name="[1e7]"></a>tos_cpu_cpsr_restore</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_cpu.o(i.tos_cpu_cpsr_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_full
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_empty
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push_stream
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop_stream
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
</UL>

<P><STRONG><a name="[1e4]"></a>tos_cpu_cpsr_save</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(i.tos_cpu_cpsr_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_full
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_empty
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push_stream
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop_stream
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
</UL>

<P><STRONG><a name="[236]"></a>tos_hal_uart_deinit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tos_hal_uart.o(i.tos_hal_uart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = tos_hal_uart_deinit &rArr; HAL_UART_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[235]"></a>tos_hal_uart_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tos_hal_uart.o(i.tos_hal_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tos_hal_uart_init &rArr; MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[176]"></a>tos_hal_uart_write</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, tos_hal_uart.o(i.tos_hal_uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tos_hal_uart_write &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_send
</UL>

<P><STRONG><a name="[1f2]"></a>tos_knl_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tos_knl_init &rArr; mmheap_init_with_pool &rArr; tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[f8]"></a>tos_knl_irq_enter</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, tos_sys.o(i.tos_knl_irq_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tos_knl_irq_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>tos_knl_irq_leave</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_irq_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tos_knl_irq_leave &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[13c]"></a>tos_knl_is_running</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_sys.o(i.tos_knl_is_running))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_enter
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
</UL>

<P><STRONG><a name="[228]"></a>tos_knl_sched_lock</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_sched_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tos_knl_sched_lock &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[229]"></a>tos_knl_sched_unlock</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_sched_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_knl_sched_unlock &rArr; knl_sched &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[1f4]"></a>tos_knl_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_knl_start
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sched_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[22c]"></a>tos_millisec2tick</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tos_time.o(i.tos_millisec2tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tos_millisec2tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_raw_data_send_until
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec_until
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
</UL>

<P><STRONG><a name="[a0]"></a>tos_mmheap_alloc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tos_mmheap.o(i.tos_mmheap_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_cache_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_construct
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[91]"></a>tos_mmheap_free</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tos_mmheap.o(i.tos_mmheap_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_cache_deinit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_construct
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_free
</UL>

<P><STRONG><a name="[1ed]"></a>tos_mmheap_pool_add</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, tos_mmheap.o(i.tos_mmheap_pool_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_block
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_pool_is_exist
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_used
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_size
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_used
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_free
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
</UL>

<P><STRONG><a name="[a2]"></a>tos_mutex_create</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tos_mutex.o(i.tos_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tos_mutex_create &rArr; pend_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_construct
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexCreate
</UL>

<P><STRONG><a name="[a4]"></a>tos_mutex_destroy</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tos_mutex.o(i.tos_mutex_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_mutex_destroy &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_deinit
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_deinit
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_free
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexDestroy
</UL>

<P><STRONG><a name="[a7]"></a>tos_mutex_pend</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tos_mutex.o(i.tos_mutex_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_send
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_getchar
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_do_exec
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_global_lock_pend
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
</UL>

<P><STRONG><a name="[22d]"></a>tos_mutex_pend_timed</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, tos_mutex.o(i.tos_mutex_pend_timed))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_fresh_owner_mark
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state2errno
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
</UL>

<P><STRONG><a name="[a9]"></a>tos_mutex_post</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, tos_mutex.o(i.tos_mutex_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = tos_mutex_post &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_one
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_task_get
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_fresh_owner_mark
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_send
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_getchar
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_do_exec
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_global_lock_post
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_write
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
</UL>

<P><STRONG><a name="[238]"></a>tos_ring_q_create</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, tos_ring_queue.o(i.tos_ring_q_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tos_ring_q_create
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_alloc_set_static
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_create
</UL>

<P><STRONG><a name="[23d]"></a>tos_ring_q_dequeue</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tos_ring_queue.o(i.tos_ring_q_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = tos_ring_q_dequeue &rArr; tos_ring_q_is_empty &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_empty
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop_stream
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop
</UL>

<P><STRONG><a name="[23c]"></a>tos_ring_q_destroy</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, tos_ring_queue.o(i.tos_ring_q_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tos_ring_q_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_deinit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_alloc_reset
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_alloc_is_static
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_destroy
</UL>

<P><STRONG><a name="[23e]"></a>tos_ring_q_enqueue</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, tos_ring_queue.o(i.tos_ring_q_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tos_ring_q_enqueue &rArr; tos_ring_q_is_full &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_full
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push_stream
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push
</UL>

<P><STRONG><a name="[249]"></a>tos_ring_q_is_empty</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tos_ring_queue.o(i.tos_ring_q_is_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_ring_q_is_empty &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
</UL>

<P><STRONG><a name="[24a]"></a>tos_ring_q_is_full</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tos_ring_queue.o(i.tos_ring_q_is_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_ring_q_is_full &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
</UL>

<P><STRONG><a name="[bb]"></a>tos_sal_module_close</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sal_module_wrapper.o(i.tos_sal_module_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tos_sal_module_close
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TCP_Destroy
</UL>

<P><STRONG><a name="[bf]"></a>tos_sal_module_connect</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sal_module_wrapper.o(i.tos_sal_module_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tos_sal_module_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TCP_Establish
</UL>

<P><STRONG><a name="[c0]"></a>tos_sal_module_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sal_module_wrapper.o(i.tos_sal_module_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tos_sal_module_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_sal_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TCP_Establish
</UL>

<P><STRONG><a name="[c2]"></a>tos_sal_module_recv_timeout</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, sal_module_wrapper.o(i.tos_sal_module_recv_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tos_sal_module_recv_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TCP_Read
</UL>

<P><STRONG><a name="[1af]"></a>tos_sal_module_register</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sal_module_wrapper.o(i.tos_sal_module_register))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_sal_init
</UL>

<P><STRONG><a name="[c4]"></a>tos_sal_module_send</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sal_module_wrapper.o(i.tos_sal_module_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tos_sal_module_send
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TCP_Write
</UL>

<P><STRONG><a name="[231]"></a>tos_sem_create</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tos_sem.o(i.tos_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tos_sem_create &rArr; tos_sem_create_max &rArr; pend_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create_max
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_raw_data_send_until
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec_until
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[24b]"></a>tos_sem_create_max</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tos_sem.o(i.tos_sem_create_max))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tos_sem_create_max &rArr; pend_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create
</UL>

<P><STRONG><a name="[232]"></a>tos_sem_destroy</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tos_sem.o(i.tos_sem_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_sem_destroy &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_deinit
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_deinit
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_raw_data_send_until
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec_until
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[174]"></a>tos_sem_pend</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, tos_sem.o(i.tos_sem_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tos_sem_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state2errno
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_getchar
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_raw_data_send_until
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec_until
</UL>

<P><STRONG><a name="[16d]"></a>tos_sem_post</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tos_sem.o(i.tos_sem_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tos_sem_post &rArr; sem_do_post &rArr; pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_uart_write_byte
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser
</UL>

<P><STRONG><a name="[b7]"></a>tos_sleep_hmsm</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, tos_time.o(i.tos_sleep_hmsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = tos_sleep_hmsm &rArr; tos_task_delay &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SleepMs
</UL>

<P><STRONG><a name="[dc]"></a>tos_systick_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tos_time.o(i.tos_systick_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_timer_remain
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_timer_is_expired
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_timer_countdown
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delay
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UptimeMs
</UL>

<P><STRONG><a name="[1e0]"></a>tos_task_create</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, tos_task.o(i.tos_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_alloc_set_static
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_stk_init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[15f]"></a>tos_task_delay</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tos_task.o(i.tos_task_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_task_delay &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_entry
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sleep_hmsm
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
</UL>

<P><STRONG><a name="[21b]"></a>tos_task_destroy</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, tos_task.o(i.tos_task_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_alloc_is_static
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_exit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[1ef]"></a>tos_task_prio_change</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, tos_task.o(i.tos_task_prio_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_highest_pending_prio_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
</UL>

<P><STRONG><a name="[24e]"></a>tos_task_yield</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tos_task.o(i.tos_task_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tos_task_yield &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
</UL>

<P><STRONG><a name="[13d]"></a>tos_tick_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tos_tick.o(i.tos_tick_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_tick_handler &rArr; tick_update &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[14e]"></a>utils_hmac_sha256</STRONG> (Thumb, 194 bytes, Stack size 264 bytes, infra_sha256.o(i.utils_hmac_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = utils_hmac_sha256 &rArr; utils_sha256_finish &rArr; utils_sha256_update &rArr; utils_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha256_update
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha256_starts
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha256_init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha256_finish
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotx_generate_sign_string
</UL>

<P><STRONG><a name="[69]"></a>utils_net_read</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, infra_net.o(i.utils_net_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = utils_net_read &rArr; LITE_syslog &rArr; LITE_syslog_routine &rArr; HAL_Vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> infra_net.o(i.iotx_net_init)
</UL>
<P><STRONG><a name="[6a]"></a>utils_net_write</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, infra_net.o(i.utils_net_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = utils_net_write &rArr; LITE_syslog &rArr; LITE_syslog_routine &rArr; HAL_Vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> infra_net.o(i.iotx_net_init)
</UL>
<P><STRONG><a name="[252]"></a>utils_sha256_finish</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, infra_sha256.o(i.utils_sha256_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = utils_sha256_finish &rArr; utils_sha256_update &rArr; utils_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha256_update
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_hmac_sha256
</UL>

<P><STRONG><a name="[24f]"></a>utils_sha256_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, infra_sha256.o(i.utils_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = utils_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_hmac_sha256
</UL>

<P><STRONG><a name="[254]"></a>utils_sha256_process</STRONG> (Thumb, 444 bytes, Stack size 312 bytes, infra_sha256.o(i.utils_sha256_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = utils_sha256_process
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha256_update
</UL>

<P><STRONG><a name="[250]"></a>utils_sha256_starts</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, infra_sha256.o(i.utils_sha256_starts))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_hmac_sha256
</UL>

<P><STRONG><a name="[251]"></a>utils_sha256_update</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, infra_sha256.o(i.utils_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = utils_sha256_update &rArr; utils_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha256_process
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha256_finish
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_hmac_sha256
</UL>

<P><STRONG><a name="[100]"></a>utils_time_countdown_ms</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, infra_timer.o(i.utils_time_countdown_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = utils_time_countdown_ms &rArr; HAL_UptimeMs &rArr; tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UptimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_wait_CONNACK
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive_sub
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_reconnect
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_connect
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTRePublish
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPuback
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTKeepalive
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_cycle
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
</UL>

<P><STRONG><a name="[156]"></a>utils_time_is_expired</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, infra_timer.o(i.utils_time_is_expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = utils_time_is_expired &rArr; HAL_UptimeMs &rArr; tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UptimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive_sub
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_reconnect
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_left
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_cycle
</UL>

<P><STRONG><a name="[114]"></a>utils_time_spend</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, infra_timer.o(i.utils_time_spend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = utils_time_spend &rArr; HAL_UptimeMs &rArr; tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UptimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
</UL>

<P><STRONG><a name="[1c7]"></a>wrapper_mqtt_check_state</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iotx_mqtt_client.o(i.wrapper_mqtt_check_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = wrapper_mqtt_check_state &rArr; iotx_mc_get_client_state &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive_sub
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_disconnect
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_subscribe
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_publish
</UL>

<P><STRONG><a name="[ea]"></a>wrapper_mqtt_connect</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, iotx_mqtt_client.o(i.wrapper_mqtt_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = wrapper_mqtt_connect &rArr; _mqtt_connect &rArr; iotx_mc_wait_CONNACK &rArr; iotx_mc_read_packet &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_connect
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SleepMs
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_attempt_reconnect
</UL>

<P><STRONG><a name="[e9]"></a>wrapper_mqtt_init</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, iotx_mqtt_client.o(i.wrapper_mqtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = wrapper_mqtt_init &rArr; iotx_mc_init &rArr; iotx_mc_set_client_state &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_release
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
</UL>

<P><STRONG><a name="[ef]"></a>wrapper_mqtt_publish</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, iotx_mqtt_client.o(i.wrapper_mqtt_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = wrapper_mqtt_publish &rArr; iotx_mc_check_topic &rArr; iotx_mc_check_rule &rArr; LITE_syslog &rArr; LITE_syslog_routine &rArr; HAL_Vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_next_packetid
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_client_state
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_topic
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_check_state
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Publish_Simple
</UL>

<P><STRONG><a name="[eb]"></a>wrapper_mqtt_release</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, iotx_mqtt_client.o(i.wrapper_mqtt_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = wrapper_mqtt_release &rArr; iotx_mc_disconnect &rArr; MQTTDisconnect &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_pub_wait_list_deinit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_disconnect
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SleepMs
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexDestroy
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Destroy
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
</UL>

<P><STRONG><a name="[f2]"></a>wrapper_mqtt_subscribe</STRONG> (Thumb, 256 bytes, Stack size 64 bytes, iotx_mqtt_client.o(i.wrapper_mqtt_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = wrapper_mqtt_subscribe &rArr; iotx_mc_check_topic &rArr; iotx_mc_check_rule &rArr; LITE_syslog &rArr; LITE_syslog_routine &rArr; HAL_Vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_next_packetid
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_client_state
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_topic
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_check_state
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Subscribe
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_deal_offline_subs
</UL>

<P><STRONG><a name="[f4]"></a>wrapper_mqtt_yield</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, iotx_mqtt_client.o(i.wrapper_mqtt_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = wrapper_mqtt_yield &rArr; iotx_mc_keepalive &rArr; iotx_mc_handle_reconnect &rArr; iotx_mc_attempt_reconnect &rArr; wrapper_mqtt_connect &rArr; _mqtt_connect &rArr; iotx_mc_wait_CONNACK &rArr; iotx_mc_read_packet &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Yield
</UL>

<P><STRONG><a name="[122]"></a>writeCString</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mqttpacket.o(i.writeCString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[11d]"></a>writeChar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqttpacket.o(i.writeChar))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
</UL>

<P><STRONG><a name="[11f]"></a>writeInt</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mqttpacket.o(i.writeInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = writeInt
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
</UL>

<P><STRONG><a name="[123]"></a>writeMQTTString</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mqttpacket.o(i.writeMQTTString))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[61]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[c8]"></a>UART_EndRxTransfer</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[62]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = UART_RxISR_16BIT &rArr; HAL_UART_RxCpltCallback &rArr; tos_at_uart_write_byte &rArr; tos_sem_post &rArr; sem_do_post &rArr; pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
</UL>
<P><STRONG><a name="[63]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = UART_RxISR_8BIT &rArr; HAL_UART_RxCpltCallback &rArr; tos_at_uart_write_byte &rArr; tos_sem_post &rArr; sem_do_post &rArr; pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
</UL>
<P><STRONG><a name="[b5]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[ae]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[aa]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[ab]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[8a]"></a>DHT11_Mode_Out_PP</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, dht11_bus.o(i.DHT11_Mode_Out_PP))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DHT11_Mode_Out_PP &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Init
</UL>

<P><STRONG><a name="[149]"></a>__ffs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tos_mmheap.o(i.__ffs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __ffs &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_fls
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_search_suitable
</UL>

<P><STRONG><a name="[14b]"></a>__fls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tos_mmheap.o(i.__fls))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_fls
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_search
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
</UL>

<P><STRONG><a name="[244]"></a>adjust_request_size</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tos_mmheap.o(i.adjust_request_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adjust_request_size
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
</UL>

<P><STRONG><a name="[177]"></a>blk_absorb</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_absorb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blk_absorb &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
</UL>

<P><STRONG><a name="[17a]"></a>blk_can_split</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_can_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = blk_can_split
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
</UL>

<P><STRONG><a name="[17b]"></a>blk_insert</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, tos_mmheap.o(i.blk_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_free_block
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
</UL>

<P><STRONG><a name="[179]"></a>blk_link_next</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_link_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
</UL>

<P><STRONG><a name="[17f]"></a>blk_locate_free</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tos_mmheap.o(i.blk_locate_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = blk_locate_free &rArr; mapping_search &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_search
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_search_suitable
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
</UL>

<P><STRONG><a name="[183]"></a>blk_mark_as_free</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_mark_as_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_free
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
</UL>

<P><STRONG><a name="[186]"></a>blk_mark_as_used</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_mark_as_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blk_mark_as_used &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_used
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_used
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
</UL>

<P><STRONG><a name="[189]"></a>blk_merge_next</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_merge_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = blk_merge_next &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>

<P><STRONG><a name="[18b]"></a>blk_merge_prev</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_merge_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>

<P><STRONG><a name="[17e]"></a>blk_next</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, tos_mmheap.o(i.blk_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_block
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_to_ptr
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>

<P><STRONG><a name="[18e]"></a>blk_prepare_used</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_prepare_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_to_ptr
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
</UL>

<P><STRONG><a name="[18a]"></a>blk_remove</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, tos_mmheap.o(i.blk_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
</UL>

<P><STRONG><a name="[181]"></a>blk_search_suitable</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, tos_mmheap.o(i.blk_search_suitable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = blk_search_suitable &rArr; __ffs &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
</UL>

<P><STRONG><a name="[185]"></a>blk_set_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_free))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
</UL>

<P><STRONG><a name="[184]"></a>blk_set_prev_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_prev_free))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
</UL>

<P><STRONG><a name="[187]"></a>blk_set_prev_used</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_prev_used))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
</UL>

<P><STRONG><a name="[191]"></a>blk_set_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_size))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
</UL>

<P><STRONG><a name="[188]"></a>blk_set_used</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_used))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
</UL>

<P><STRONG><a name="[178]"></a>blk_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_size))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_can_split
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
</UL>

<P><STRONG><a name="[190]"></a>blk_split</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tos_mmheap.o(i.blk_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_block
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_to_ptr
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_size
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
</UL>

<P><STRONG><a name="[18c]"></a>blk_to_ptr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_to_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>

<P><STRONG><a name="[18f]"></a>blk_trim_free</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_trim_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_can_split
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
</UL>

<P><STRONG><a name="[14a]"></a>generic_fls</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tos_mmheap.o(i.generic_fls))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ffs
</UL>

<P><STRONG><a name="[17d]"></a>insert_free_block</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, tos_mmheap.o(i.insert_free_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = insert_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>

<P><STRONG><a name="[17c]"></a>mapping_insert</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tos_mmheap.o(i.mapping_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_search
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>

<P><STRONG><a name="[180]"></a>mapping_search</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tos_mmheap.o(i.mapping_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = mapping_search &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
</UL>

<P><STRONG><a name="[1ec]"></a>mmheap_ctl_init</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, tos_mmheap.o(i.mmheap_ctl_init))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
</UL>

<P><STRONG><a name="[245]"></a>mmheap_pool_is_exist</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tos_mmheap.o(i.mmheap_pool_is_exist))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[18d]"></a>offset_to_block</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_mmheap.o(i.offset_to_block))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>

<P><STRONG><a name="[182]"></a>remove_free_block</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tos_mmheap.o(i.remove_free_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = remove_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
</UL>

<P><STRONG><a name="[246]"></a>mutex_fresh_owner_mark</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tos_mutex.o(i.mutex_fresh_owner_mark))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mutex_fresh_owner_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>

<P><STRONG><a name="[1ee]"></a>mutex_old_owner_release</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tos_mutex.o(i.mutex_old_owner_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = mutex_old_owner_release &rArr; tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>

<P><STRONG><a name="[1fb]"></a>pend_list_add</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tos_pend.o(i.pend_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pend_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
</UL>

<P><STRONG><a name="[1fa]"></a>tos_list_del</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_pend.o(i.tos_list_del))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
</UL>

<P><STRONG><a name="[1f7]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_pend.o(i.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
</UL>

<P><STRONG><a name="[1fe]"></a>tos_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_pend.o(i.tos_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_deinit
</UL>

<P><STRONG><a name="[20e]"></a>_list_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_sched.o(i._list_add))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
</UL>

<P><STRONG><a name="[211]"></a>_list_del</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sched.o(i._list_del))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[210]"></a>readyqueue_prio_highest_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tos_sched.o(i.readyqueue_prio_highest_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[20d]"></a>readyqueue_prio_mark</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_prio_mark))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>

<P><STRONG><a name="[20f]"></a>tos_list_add_tail</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tos_sched.o(i.tos_list_add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
</UL>

<P><STRONG><a name="[20c]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_sched.o(i.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[212]"></a>sem_do_post</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, tos_sem.o(i.sem_do_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = sem_do_post &rArr; pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post
</UL>

<P><STRONG><a name="[6d]"></a>knl_idle_entry</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_sys.o(i.knl_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = knl_idle_entry &rArr; task_free_all &rArr; task_free &rArr; tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_sys.o(i.knl_idle_init)
</UL>
<P><STRONG><a name="[214]"></a>task_do_destroy</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tos_task.o(i.task_do_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_release
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>

<P><STRONG><a name="[70]"></a>task_exit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tos_task.o(i.task_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = task_exit &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_task.o(i.tos_task_create)
</UL>
<P><STRONG><a name="[21c]"></a>task_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tos_task.o(i.task_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = task_free &rArr; tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
</UL>

<P><STRONG><a name="[21d]"></a>task_highest_pending_prio_get</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, tos_task.o(i.task_highest_pending_prio_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[217]"></a>task_mutex_release</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tos_task.o(i.task_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[21a]"></a>task_reset</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tos_task.o(i.task_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = task_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_deinit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_alloc_reset
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[218]"></a>task_state_is_ready</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_task.o(i.task_state_is_ready))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[24c]"></a>tos_list_add</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_task.o(i.tos_list_add))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[219]"></a>tos_list_del</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_task.o(i.tos_list_del))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
</UL>

<P><STRONG><a name="[216]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_task.o(i.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[220]"></a>tos_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_task.o(i.tos_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
</UL>

<P><STRONG><a name="[221]"></a>tick_task_place</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, tos_tick.o(i.tick_task_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
</UL>

<P><STRONG><a name="[222]"></a>tick_task_takeoff</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tos_tick.o(i.tick_task_takeoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tick_task_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
</UL>

<P><STRONG><a name="[223]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_tick.o(i.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
</UL>

<P><STRONG><a name="[225]"></a>timer_place</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, tos_timer.o(i.timer_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = timer_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[226]"></a>timer_takeoff</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tos_timer.o(i.timer_takeoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = timer_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[208]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port_c.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_priority_set
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_config
</UL>

<P><STRONG><a name="[1f3]"></a>errno_knl2cmsis</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.errno_knl2cmsis))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[1f5]"></a>priority_cmsis2knl</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cmsis_os.o(i.priority_cmsis2knl))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[f]"></a>esp8266_close</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, esp8266.o(i.esp8266_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = esp8266_close &rArr; tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>esp8266_connect</STRONG> (Thumb, 100 bytes, Stack size 80 bytes, esp8266.o(i.esp8266_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = esp8266_connect &rArr; esp8266_reconnect_init &rArr; esp8266_multilink_set &rArr; tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec_until
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_alloc
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_reconnect_init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[1a5]"></a>esp8266_echo_close</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, esp8266.o(i.esp8266_echo_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = esp8266_echo_close &rArr; tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_reconnect_init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
</UL>

<P><STRONG><a name="[5]"></a>esp8266_incoming_data_process</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, esp8266.o(i.esp8266_incoming_data_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = esp8266_incoming_data_process &rArr; tos_at_uart_read &rArr; at_uart_getchar &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_uart_read
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>esp8266_init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, esp8266.o(i.esp8266_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = esp8266_init &rArr; esp8266_net_mode_set &rArr; tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_send_mode_set
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_restore
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_net_mode_set
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_multilink_set
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_echo_close
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[1ac]"></a>esp8266_is_link_broken</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, esp8266.o(i.esp8266_is_link_broken))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = esp8266_is_link_broken &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_sendto
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_send
</UL>

<P><STRONG><a name="[1ab]"></a>esp8266_multilink_set</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, esp8266.o(i.esp8266_multilink_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = esp8266_multilink_set &rArr; tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_reconnect_init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
</UL>

<P><STRONG><a name="[1a9]"></a>esp8266_net_mode_set</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, esp8266.o(i.esp8266_net_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = esp8266_net_mode_set &rArr; tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
</UL>

<P><STRONG><a name="[7]"></a>esp8266_parse_domain</STRONG> (Thumb, 102 bytes, Stack size 128 bytes, esp8266.o(i.esp8266_parse_domain))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = esp8266_parse_domain &rArr; esp8266_reconnect_init &rArr; esp8266_multilink_set &rArr; tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_reconnect_init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[1a1]"></a>esp8266_reconnect_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, esp8266.o(i.esp8266_reconnect_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = esp8266_reconnect_init &rArr; esp8266_multilink_set &rArr; tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_multilink_set
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_echo_close
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_parse_domain
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_connect
</UL>

<P><STRONG><a name="[b]"></a>esp8266_recv</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, esp8266.o(i.esp8266_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = esp8266_recv &rArr; esp8266_recv_timeout &rArr; tos_at_channel_read_timed &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_recv_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>esp8266_recv_timeout</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, esp8266.o(i.esp8266_recv_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = esp8266_recv_timeout &rArr; tos_at_channel_read_timed &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>esp8266_recvfrom</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, esp8266.o(i.esp8266_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = esp8266_recvfrom &rArr; esp8266_recvfrom_timeout &rArr; tos_at_channel_read_timed &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_recvfrom_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>esp8266_recvfrom_timeout</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, esp8266.o(i.esp8266_recvfrom_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = esp8266_recvfrom_timeout &rArr; tos_at_channel_read_timed &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_recvfrom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[1a8]"></a>esp8266_restore</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, esp8266.o(i.esp8266_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = esp8266_restore &rArr; tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
</UL>

<P><STRONG><a name="[9]"></a>esp8266_send</STRONG> (Thumb, 172 bytes, Stack size 128 bytes, esp8266.o(i.esp8266_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = esp8266_send &rArr; tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_raw_data_send_until
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_set_broken
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_is_working
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_is_link_broken
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_global_lock_post
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_global_lock_pend
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[1aa]"></a>esp8266_send_mode_set</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, esp8266.o(i.esp8266_send_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = esp8266_send_mode_set &rArr; tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
</UL>

<P><STRONG><a name="[c]"></a>esp8266_sendto</STRONG> (Thumb, 204 bytes, Stack size 144 bytes, esp8266.o(i.esp8266_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = esp8266_sendto &rArr; tos_at_cmd_exec &rArr; at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_raw_data_send_until
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_set_broken
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_is_working
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_is_link_broken
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_global_lock_post
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_global_lock_pend
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[160]"></a>at_channel_construct</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, tos_at.o(i.at_channel_construct))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = at_channel_construct &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_alloc
</UL>

<P><STRONG><a name="[22a]"></a>at_channel_get</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tos_at.o(i.at_channel_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_channel_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_set_broken
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_is_working
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_write
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_free
</UL>

<P><STRONG><a name="[162]"></a>at_channel_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, tos_at.o(i.at_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_channel_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[163]"></a>at_cmd_do_exec</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, tos_at.o(i.at_cmd_do_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = at_cmd_do_exec &rArr; at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec_until
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
</UL>

<P><STRONG><a name="[230]"></a>at_echo_attach</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tos_at.o(i.at_echo_attach))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_raw_data_send_until
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec_until
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
</UL>

<P><STRONG><a name="[166]"></a>at_echo_buffer_copy</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, tos_at.o(i.at_echo_buffer_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at_echo_buffer_copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser
</UL>

<P><STRONG><a name="[167]"></a>at_echo_status_set</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tos_at.o(i.at_echo_status_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = at_echo_status_set &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser
</UL>

<P><STRONG><a name="[168]"></a>at_event_do_get</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, tos_at.o(i.at_event_do_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = at_event_do_get &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_event
</UL>

<P><STRONG><a name="[233]"></a>at_event_table_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_at.o(i.at_event_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[16a]"></a>at_get_event</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tos_at.o(i.at_get_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = at_get_event &rArr; at_event_do_get &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_event_do_get
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_line_parse
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser
</UL>

<P><STRONG><a name="[16b]"></a>at_is_echo_expect</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, tos_at.o(i.at_is_echo_expect))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = at_is_echo_expect &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_line_parse
</UL>

<P><STRONG><a name="[6f]"></a>at_parser</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, tos_at.o(i.at_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = at_parser &rArr; at_uart_line_parse &rArr; at_uart_getchar &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_line_parse
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_event
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_echo_status_set
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_echo_buffer_copy
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_at.o(i.tos_at_init)
</UL>
<P><STRONG><a name="[16e]"></a>at_recv_cache_deinit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tos_at.o(i.at_recv_cache_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = at_recv_cache_deinit &rArr; tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[16f]"></a>at_recv_cache_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tos_at.o(i.at_recv_cache_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = at_recv_cache_init &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[173]"></a>at_uart_getchar</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, tos_at.o(i.at_uart_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = at_uart_getchar &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_line_parse
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_uart_read
</UL>

<P><STRONG><a name="[16c]"></a>at_uart_line_parse</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, tos_at.o(i.at_uart_line_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = at_uart_line_parse &rArr; at_uart_getchar &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_getchar
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_is_echo_expect
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_event
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser
</UL>

<P><STRONG><a name="[164]"></a>at_uart_send</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, tos_at.o(i.at_uart_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = at_uart_send &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_hal_uart_write
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_do_exec
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_raw_data_send_until
</UL>

<P><STRONG><a name="[157]"></a>_offline_subs_list_deinit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mqtt_api.o(i._offline_subs_list_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = _offline_subs_list_deinit &rArr; HAL_MutexDestroy &rArr; HAL_Free &rArr; tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexDestroy
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_deal_offline_subs
</UL>

<P><STRONG><a name="[158]"></a>_offline_subs_list_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mqtt_api.o(i._offline_subs_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = _offline_subs_list_init &rArr; HAL_MutexCreate &rArr; HAL_Malloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexCreate
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_offline_subscribe
</UL>

<P><STRONG><a name="[1d8]"></a>iotx_mqtt_deal_offline_subs</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, mqtt_api.o(i.iotx_mqtt_deal_offline_subs))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = iotx_mqtt_deal_offline_subs &rArr; wrapper_mqtt_subscribe &rArr; iotx_mc_check_topic &rArr; iotx_mc_check_rule &rArr; LITE_syslog &rArr; LITE_syslog_routine &rArr; HAL_Vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_subscribe
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_offline_subs_list_deinit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_report_funcs
</UL>

<P><STRONG><a name="[f1]"></a>iotx_mqtt_offline_subscribe</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, mqtt_api.o(i.iotx_mqtt_offline_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = iotx_mqtt_offline_subscribe &rArr; _offline_subs_list_init &rArr; HAL_MutexCreate &rArr; HAL_Malloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_offline_subs_list_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Subscribe
</UL>

<P><STRONG><a name="[ec]"></a>iotx_mqtt_report_funcs</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, mqtt_api.o(i.iotx_mqtt_report_funcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = iotx_mqtt_report_funcs &rArr; iotx_report_firmware_version &rArr; LITE_syslog &rArr; LITE_syslog_routine &rArr; HAL_Vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_set_report_func
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_mid
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_firmware_version
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_devinfo
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_deal_offline_subs
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
</UL>

<P><STRONG><a name="[10b]"></a>MQTTDisconnect</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, iotx_mqtt_client.o(i.MQTTDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MQTTDisconnect &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reset_send_buffer
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_send_buffer
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_disconnect
</UL>

<P><STRONG><a name="[10d]"></a>MQTTKeepalive</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, iotx_mqtt_client.o(i.MQTTKeepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = MQTTKeepalive &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reset_send_buffer
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_send_buffer
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_pingreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive_sub
</UL>

<P><STRONG><a name="[112]"></a>MQTTPubInfoProc</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, iotx_mqtt_client.o(i.MQTTPubInfoProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = MQTTPubInfoProc &rArr; MQTTRePublish &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_client_state
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTRePublish
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_spend
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_start
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_cycle
</UL>

<P><STRONG><a name="[118]"></a>MQTTPuback</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, iotx_mqtt_client.o(i.MQTTPuback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = MQTTPuback &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reset_send_buffer
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_send_buffer
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBLISH
</UL>

<P><STRONG><a name="[115]"></a>MQTTRePublish</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, iotx_mqtt_client.o(i.MQTTRePublish))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MQTTRePublish &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
</UL>

<P><STRONG><a name="[129]"></a>MQTTSubscribe</STRONG> (Thumb, 610 bytes, Stack size 80 bytes, iotx_mqtt_client.o(i.MQTTSubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = MQTTSubscribe &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_handle_is_identical
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reset_send_buffer
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_send_buffer
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_subscribe
</UL>

<P><STRONG><a name="[1d5]"></a>_alloc_recv_buffer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iotx_mqtt_client.o(i._alloc_recv_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
</UL>

<P><STRONG><a name="[fc]"></a>_alloc_send_buffer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iotx_mqtt_client.o(i._alloc_send_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPuback
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTKeepalive
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
</UL>

<P><STRONG><a name="[fb]"></a>_get_connect_length</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iotx_mqtt_client.o(i._get_connect_length))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
</UL>

<P><STRONG><a name="[1c5]"></a>_handle_event</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, iotx_mqtt_client.o(i._handle_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _handle_event
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_UNSUBACK
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_SUBACK
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBACK
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_deliver_message
</UL>

<P><STRONG><a name="[150]"></a>_iotx_mqtt_event_handle_sub</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, iotx_mqtt_client.o(i._iotx_mqtt_event_handle_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = _iotx_mqtt_event_handle_sub &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_SUBACK
</UL>

<P><STRONG><a name="[151]"></a>_mqtt_connect</STRONG> (Thumb, 396 bytes, Stack size 48 bytes, iotx_mqtt_client.o(i._mqtt_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = _mqtt_connect &rArr; iotx_mc_wait_CONNACK &rArr; iotx_mc_read_packet &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_wait_CONNACK
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SleepMs
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_connect
</UL>

<P><STRONG><a name="[1be]"></a>_reset_recv_buffer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iotx_mqtt_client.o(i._reset_recv_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_wait_CONNACK
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
</UL>

<P><STRONG><a name="[fe]"></a>_reset_send_buffer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iotx_mqtt_client.o(i._reset_send_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPuback
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTKeepalive
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
</UL>

<P><STRONG><a name="[1b9]"></a>iotx_mc_attempt_reconnect</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, iotx_mqtt_client.o(i.iotx_mc_attempt_reconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = iotx_mc_attempt_reconnect &rArr; wrapper_mqtt_connect &rArr; _mqtt_connect &rArr; iotx_mc_wait_CONNACK &rArr; iotx_mc_read_packet &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_connect
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_reconnect
</UL>

<P><STRONG><a name="[12a]"></a>iotx_mc_check_handle_is_identical</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, iotx_mqtt_client.o(i.iotx_mc_check_handle_is_identical))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = iotx_mc_check_handle_is_identical &rArr; iotx_mc_check_handle_is_identical_ex &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_handle_is_identical_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
</UL>

<P><STRONG><a name="[1ba]"></a>iotx_mc_check_handle_is_identical_ex</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, iotx_mqtt_client.o(i.iotx_mc_check_handle_is_identical_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = iotx_mc_check_handle_is_identical_ex &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_handle_is_identical
</UL>

<P><STRONG><a name="[1bb]"></a>iotx_mc_check_rule</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, iotx_mqtt_client.o(i.iotx_mc_check_rule))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = iotx_mc_check_rule &rArr; LITE_syslog &rArr; LITE_syslog_routine &rArr; HAL_Vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_topic
</UL>

<P><STRONG><a name="[1bc]"></a>iotx_mc_check_topic</STRONG> (Thumb, 228 bytes, Stack size 88 bytes, iotx_mqtt_client.o(i.iotx_mc_check_topic))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = iotx_mc_check_topic &rArr; iotx_mc_check_rule &rArr; LITE_syslog &rArr; LITE_syslog_routine &rArr; HAL_Vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_rule
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infra_strtok
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_subscribe
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_publish
</UL>

<P><STRONG><a name="[154]"></a>iotx_mc_cycle</STRONG> (Thumb, 562 bytes, Stack size 32 bytes, iotx_mqtt_client.o(i.iotx_mc_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = iotx_mc_cycle &rArr; iotx_mc_read_packet &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_UNSUBACK
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_SUBACK
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBLISH
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBACK
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_client_state
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reset_recv_buffer
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_cycle
</UL>

<P><STRONG><a name="[1d6]"></a>iotx_mc_decode_packet</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, iotx_mqtt_client.o(i.iotx_mc_decode_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = iotx_mc_decode_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
</UL>

<P><STRONG><a name="[1c3]"></a>iotx_mc_deliver_message</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, iotx_mqtt_client.o(i.iotx_mc_deliver_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = iotx_mc_deliver_message &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_is_topic_matched
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_event
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_equals
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBLISH
</UL>

<P><STRONG><a name="[1c6]"></a>iotx_mc_disconnect</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, iotx_mqtt_client.o(i.iotx_mc_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = iotx_mc_disconnect &rArr; MQTTDisconnect &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_check_state
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_release
</UL>

<P><STRONG><a name="[1d3]"></a>iotx_mc_disconnect_callback</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, iotx_mqtt_client.o(i.iotx_mc_disconnect_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iotx_mc_disconnect_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive
</UL>

<P><STRONG><a name="[113]"></a>iotx_mc_get_client_state</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, iotx_mqtt_client.o(i.iotx_mc_get_client_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = iotx_mc_get_client_state &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_subscribe
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_publish
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_check_state
</UL>

<P><STRONG><a name="[1c8]"></a>iotx_mc_get_next_packetid</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, iotx_mqtt_client.o(i.iotx_mc_get_next_packetid))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = iotx_mc_get_next_packetid &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_subscribe
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_publish
</UL>

<P><STRONG><a name="[1c9]"></a>iotx_mc_handle_reconnect</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, iotx_mqtt_client.o(i.iotx_mc_handle_reconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = iotx_mc_handle_reconnect &rArr; iotx_mc_attempt_reconnect &rArr; wrapper_mqtt_connect &rArr; _mqtt_connect &rArr; iotx_mc_wait_CONNACK &rArr; iotx_mc_read_packet &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_attempt_reconnect
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SleepMs
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_is_expired
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive
</UL>

<P><STRONG><a name="[1ca]"></a>iotx_mc_handle_recv_CONNACK</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, iotx_mqtt_client.o(i.iotx_mc_handle_recv_CONNACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = iotx_mc_handle_recv_CONNACK &rArr; LITE_syslog &rArr; LITE_syslog_routine &rArr; HAL_Vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_wait_CONNACK
</UL>

<P><STRONG><a name="[1bf]"></a>iotx_mc_handle_recv_PUBACK</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, iotx_mqtt_client.o(i.iotx_mc_handle_recv_PUBACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = iotx_mc_handle_recv_PUBACK &rArr; MQTTDeserialize_ack &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_mask_pubInfo_from
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_event
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
</UL>

<P><STRONG><a name="[1c1]"></a>iotx_mc_handle_recv_PUBLISH</STRONG> (Thumb, 404 bytes, Stack size 72 bytes, iotx_mqtt_client.o(i.iotx_mc_handle_recv_PUBLISH))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = iotx_mc_handle_recv_PUBLISH &rArr; iotx_mc_deliver_message &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_deliver_message
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPuback
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
</UL>

<P><STRONG><a name="[1c0]"></a>iotx_mc_handle_recv_SUBACK</STRONG> (Thumb, 322 bytes, Stack size 80 bytes, iotx_mqtt_client.o(i.iotx_mc_handle_recv_SUBACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = iotx_mc_handle_recv_SUBACK &rArr; _iotx_mqtt_event_handle_sub &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotx_mqtt_event_handle_sub
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_event
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
</UL>

<P><STRONG><a name="[1c2]"></a>iotx_mc_handle_recv_UNSUBACK</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, iotx_mqtt_client.o(i.iotx_mc_handle_recv_UNSUBACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = iotx_mc_handle_recv_UNSUBACK &rArr; MQTTDeserialize_unsuback &rArr; MQTTDeserialize_ack &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_event
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_unsuback
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
</UL>

<P><STRONG><a name="[1cc]"></a>iotx_mc_init</STRONG> (Thumb, 452 bytes, Stack size 112 bytes, iotx_mqtt_client.o(i.iotx_mc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = iotx_mc_init &rArr; iotx_mc_set_client_state &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_connect_params
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_pub_wait_list_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexDestroy
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexCreate
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_net_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_init
</UL>

<P><STRONG><a name="[1c4]"></a>iotx_mc_is_topic_matched</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, iotx_mqtt_client.o(i.iotx_mc_is_topic_matched))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iotx_mc_is_topic_matched
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_deliver_message
</UL>

<P><STRONG><a name="[1d0]"></a>iotx_mc_keepalive</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, iotx_mqtt_client.o(i.iotx_mc_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = iotx_mc_keepalive &rArr; iotx_mc_handle_reconnect &rArr; iotx_mc_attempt_reconnect &rArr; wrapper_mqtt_connect &rArr; _mqtt_connect &rArr; iotx_mc_wait_CONNACK &rArr; iotx_mc_read_packet &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_reconnect_callback
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive_sub
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_reconnect
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_client_state
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_disconnect_callback
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_yield
</UL>

<P><STRONG><a name="[1d1]"></a>iotx_mc_keepalive_sub</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, iotx_mqtt_client.o(i.iotx_mc_keepalive_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = iotx_mc_keepalive_sub &rArr; MQTTKeepalive &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTKeepalive
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_check_state
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_is_expired
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive
</UL>

<P><STRONG><a name="[1cb]"></a>iotx_mc_mask_pubInfo_from</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, iotx_mqtt_client.o(i.iotx_mc_mask_pubInfo_from))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = iotx_mc_mask_pubInfo_from
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBACK
</UL>

<P><STRONG><a name="[1d4]"></a>iotx_mc_pub_wait_list_deinit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, iotx_mqtt_client.o(i.iotx_mc_pub_wait_list_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iotx_mc_pub_wait_list_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_release
</UL>

<P><STRONG><a name="[1cd]"></a>iotx_mc_pub_wait_list_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, iotx_mqtt_client.o(i.iotx_mc_pub_wait_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iotx_mc_pub_wait_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
</UL>

<P><STRONG><a name="[11c]"></a>iotx_mc_push_pubInfo_to</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, iotx_mqtt_client.o(i.iotx_mc_push_pubInfo_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = iotx_mc_push_pubInfo_to &rArr; LITE_syslog &rArr; LITE_syslog_routine &rArr; HAL_Vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_start
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
</UL>

<P><STRONG><a name="[1bd]"></a>iotx_mc_read_packet</STRONG> (Thumb, 892 bytes, Stack size 568 bytes, iotx_mqtt_client.o(i.iotx_mc_read_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = iotx_mc_read_packet &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_decode_packet
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_event
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_recv_buffer
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_left
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_wait_CONNACK
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
</UL>

<P><STRONG><a name="[1d2]"></a>iotx_mc_reconnect_callback</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, iotx_mqtt_client.o(i.iotx_mc_reconnect_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iotx_mc_reconnect_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive
</UL>

<P><STRONG><a name="[1d7]"></a>iotx_mc_release</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, iotx_mqtt_client.o(i.iotx_mc_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iotx_mc_release
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_init
</UL>

<P><STRONG><a name="[101]"></a>iotx_mc_send_packet</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, iotx_mqtt_client.o(i.iotx_mc_send_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = iotx_mc_send_packet &rArr; iotx_time_left &rArr; utils_time_is_expired &rArr; HAL_UptimeMs &rArr; tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_is_expired
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_left
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTRePublish
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPuback
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTKeepalive
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
</UL>

<P><STRONG><a name="[117]"></a>iotx_mc_set_client_state</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, iotx_mqtt_client.o(i.iotx_mc_set_client_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = iotx_mc_set_client_state &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive_sub
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_reconnect
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_disconnect
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_connect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_subscribe
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_release
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_publish
</UL>

<P><STRONG><a name="[1ce]"></a>iotx_mc_set_connect_params</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, iotx_mqtt_client.o(i.iotx_mc_set_connect_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = iotx_mc_set_connect_params &rArr; LITE_syslog &rArr; LITE_syslog_routine &rArr; HAL_Vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
</UL>

<P><STRONG><a name="[152]"></a>iotx_mc_wait_CONNACK</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, iotx_mqtt_client.o(i.iotx_mc_wait_CONNACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = iotx_mc_wait_CONNACK &rArr; iotx_mc_read_packet &rArr; HAL_MutexLock &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_CONNACK
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reset_recv_buffer
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_connect
</UL>

<P><STRONG><a name="[193]"></a>connect_tcp</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, infra_net.o(i.connect_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = connect_tcp &rArr; LITE_syslog &rArr; LITE_syslog_routine &rArr; HAL_Vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TCP_Establish
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_net_connect
</UL>

<P><STRONG><a name="[19e]"></a>disconnect_tcp</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, infra_net.o(i.disconnect_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = disconnect_tcp &rArr; LITE_syslog &rArr; LITE_syslog_routine &rArr; HAL_Vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TCP_Destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_net_disconnect
</UL>

<P><STRONG><a name="[209]"></a>read_tcp</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, infra_net.o(i.read_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = read_tcp &rArr; HAL_TCP_Read &rArr; tos_sal_module_recv_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TCP_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_net_read
</UL>

<P><STRONG><a name="[253]"></a>write_tcp</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, infra_net.o(i.write_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = write_tcp &rArr; HAL_TCP_Write &rArr; tos_sal_module_send
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TCP_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_net_write
</UL>

<P><STRONG><a name="[14f]"></a>_hex2str</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, dev_sign_mqtt.o(i._hex2str))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _hex2str
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotx_generate_sign_string
</UL>

<P><STRONG><a name="[14c]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[145]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vprintf
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[15a]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[159]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[66]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[5f]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
