<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\TencentOS_tiny.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\TencentOS_tiny.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Oct 28 15:32:37 2019
<BR><P>
<H3>Maximum Stack Usage =        608 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
suit_priority_queue &rArr; test_tos_priority_queue_enqueue_limit &rArr; tos_prio_q_dequeue &rArr; prio_q_prio_mgr_slot_dequeue &rArr; tos_bin_heap_pop &rArr; bin_heap_percolate_down &rArr; bin_heap_do_percolate_up
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[22c]">port_int_disable</a>
 <LI><a href="#[243]">port_int_enable</a>
 <LI><a href="#[22b]">port_cpsr_save</a>
 <LI><a href="#[22a]">port_cpsr_restore</a>
 <LI><a href="#[229]">port_clz</a>
 <LI><a href="#[102]">port_sched_start</a>
 <LI><a href="#[fc]">port_context_switch</a>
 <LI><a href="#[100]">port_irq_context_switch</a>
 <LI><a href="#[a]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1e]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ADC1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[6]">BusFault_Handler</a> from stm32l4xx_it.o(i.BusFault_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[20]">CAN1_RX0_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[21]">CAN1_RX1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[22]">CAN1_SCE_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1f]">CAN1_TX_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3d]">COMP_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4b]">CRS_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[17]">DMA1_Channel1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[18]">DMA1_Channel2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[19]">DMA1_Channel3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel4_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel5_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel6_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel7_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[38]">DMA2_Channel1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[39]">DMA2_Channel2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3a]">DMA2_Channel3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3b]">DMA2_Channel4_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3c]">DMA2_Channel5_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[40]">DMA2_Channel6_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[41]">DMA2_Channel7_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[9]">DebugMon_Handler</a> from stm32l4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[12]">EXTI0_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[13]">EXTI1_IRQHandler</a> from stm32l4xx_it.o(i.EXTI1_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[14]">EXTI2_IRQHandler</a> from stm32l4xx_it.o(i.EXTI2_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[15]">EXTI3_IRQHandler</a> from stm32l4xx_it.o(i.EXTI3_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[16]">EXTI4_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[23]">EXTI9_5_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[10]">FLASH_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4a]">FPU_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from stm32l4xx_it.o(i.HardFault_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[45]">I2C3_ER_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[44]">I2C3_EV_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3e]">LPTIM1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3f]">LPTIM2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[42]">LPUART1_IRQHandler</a> from stm32l4xx_it.o(i.LPUART1_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[5]">MemManage_Handler</a> from stm32l4xx_it.o(i.MemManage_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from stm32l4xx_it.o(i.NMI_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[d]">PVD_PVM_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from port_s.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[43]">QUADSPI_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[11]">RCC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[49]">RNG_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[f]">RTC_WKUP_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[46]">SAI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[34]">SDMMC1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[35]">SPI3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from stm32l4xx_it.o(i.SVC_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[47]">SWPMI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from stm32l4xx_it.o(i.SysTick_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4d]">SystemInit</a> from system_stm32l4xx.o(i.SystemInit) referenced from startup_stm32l431xx.o(.text)
 <LI><a href="#[e]">TAMP_STAMP_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[24]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[27]">TIM1_CC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[26]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[25]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[28]">TIM2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[36]">TIM6_DAC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[37]">TIM7_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[48]">TSC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4f]">UART_DMAAbortOnError</a> from stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from stm32l4xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from stm32l4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from stm32l4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[c]">WWDG_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l431xx.o(.text)
 <LI><a href="#[7f]">application_entry</a> from test_main.o(i.application_entry) referenced from main.o(.constdata)
 <LI><a href="#[50]">fputc</a> from mcu_init.o(i.fputc) referenced from printf8.o(i.__0fprintf$8)
 <LI><a href="#[50]">fputc</a> from mcu_init.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[5f]">knl_idle_entry</a> from tos_sys.o(i.knl_idle_entry) referenced from tos_sys.o(i.knl_idle_init)
 <LI><a href="#[4c]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[60]">prio_q_mgr_entry_cmp</a> from tos_priority_queue.o(i.prio_q_mgr_entry_cmp) referenced from tos_priority_queue.o(i.prio_q_prio_mgr_init)
 <LI><a href="#[5b]">suit_binary_heap</a> from suit_binary_heap.o(i.suit_binary_heap) referenced from test_main.o(i.application_entry)
 <LI><a href="#[58]">suit_char_fifo</a> from suit_char_fifo.o(i.suit_char_fifo) referenced from test_main.o(i.application_entry)
 <LI><a href="#[56]">suit_event</a> from suit_event.o(i.suit_event) referenced from test_main.o(i.application_entry)
 <LI><a href="#[5a]">suit_mail_queue</a> from suit_mail_queue.o(i.suit_mail_queue) referenced from test_main.o(i.application_entry)
 <LI><a href="#[59]">suit_message_queue</a> from suit_message_queue.o(i.suit_message_queue) referenced from test_main.o(i.application_entry)
 <LI><a href="#[52]">suit_mmblk</a> from suit_mmblk.o(i.suit_mmblk) referenced from test_main.o(i.application_entry)
 <LI><a href="#[54]">suit_mutex</a> from suit_mutex.o(i.suit_mutex) referenced from test_main.o(i.application_entry)
 <LI><a href="#[5e]">suit_priority_mail_queue</a> from suit_priority_mail_queue.o(i.suit_priority_mail_queue) referenced from test_main.o(i.application_entry)
 <LI><a href="#[5d]">suit_priority_message_queue</a> from suit_priority_message_queue.o(i.suit_priority_message_queue) referenced from test_main.o(i.application_entry)
 <LI><a href="#[5c]">suit_priority_queue</a> from suit_priority_queue.o(i.suit_priority_queue) referenced from test_main.o(i.application_entry)
 <LI><a href="#[57]">suit_ring_queue</a> from suit_ring_queue.o(i.suit_ring_queue) referenced from test_main.o(i.application_entry)
 <LI><a href="#[55]">suit_sem</a> from suit_sem.o(i.suit_sem) referenced from test_main.o(i.application_entry)
 <LI><a href="#[51]">suit_task</a> from suit_task.o(i.suit_task) referenced from test_main.o(i.application_entry)
 <LI><a href="#[53]">suit_timer</a> from suit_timer.o(i.suit_timer) referenced from test_main.o(i.application_entry)
 <LI><a href="#[7e]">task_exit</a> from tos_task.o(i.task_exit) referenced from tos_task.o(i.tos_task_create)
 <LI><a href="#[66]">test_bin_heap_cmp_dummy</a> from suit_binary_heap.o(i.test_bin_heap_cmp_dummy) referenced from suit_binary_heap.o(i.test_tos_binary_heap_create)
 <LI><a href="#[65]">test_bin_heap_max_cmp_dummy</a> from suit_binary_heap.o(i.test_bin_heap_max_cmp_dummy) referenced from suit_binary_heap.o(i.test_tos_binary_flush)
 <LI><a href="#[65]">test_bin_heap_max_cmp_dummy</a> from suit_binary_heap.o(i.test_bin_heap_max_cmp_dummy) referenced from suit_binary_heap.o(i.test_tos_binary_heap_max_push)
 <LI><a href="#[65]">test_bin_heap_max_cmp_dummy</a> from suit_binary_heap.o(i.test_bin_heap_max_cmp_dummy) referenced from suit_binary_heap.o(i.test_tos_binary_heap_push_limit)
 <LI><a href="#[67]">test_bin_heap_max_int_cmp_dummy</a> from suit_binary_heap.o(i.test_bin_heap_max_int_cmp_dummy) referenced from suit_binary_heap.o(i.test_tos_binary_heap_max_int_push)
 <LI><a href="#[69]">test_bin_heap_min_cmp_dummy</a> from suit_binary_heap.o(i.test_bin_heap_min_cmp_dummy) referenced from suit_binary_heap.o(i.test_tos_binary_heap_min_push)
 <LI><a href="#[68]">test_bin_heap_min_int_cmp_dummy</a> from suit_binary_heap.o(i.test_bin_heap_min_int_cmp_dummy) referenced from suit_binary_heap.o(i.test_tos_binary_heap_min_int_push)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_mutex.o(i.test_mutex_pend_destroy)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_event.o(i.test_tos_event_pend_all)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_event.o(i.test_tos_event_pend_any)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_event.o(i.test_tos_event_pend_timed)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_event.o(i.test_tos_event_post_keep)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_mail_queue.o(i.test_tos_mail_queue_flush)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_mail_queue.o(i.test_tos_mail_queue_pend)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_mail_queue.o(i.test_tos_mail_queue_pend_timed)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_mail_queue.o(i.test_tos_mail_queue_post_all)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_message_queue.o(i.test_tos_message_queue_flush)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_message_queue.o(i.test_tos_message_queue_pend)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_message_queue.o(i.test_tos_message_queue_pend_timed)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_message_queue.o(i.test_tos_message_queue_post_all)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_mutex.o(i.test_tos_mutex_pend)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_mutex.o(i.test_tos_mutex_pend_timed)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_priority_mail_queue.o(i.test_tos_prio_mail_queue_flush)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_priority_mail_queue.o(i.test_tos_prio_mail_queue_pend)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_priority_mail_queue.o(i.test_tos_prio_mail_queue_pend_timed)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_priority_mail_queue.o(i.test_tos_prio_mail_queue_post_all)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_priority_message_queue.o(i.test_tos_priority_message_queue_flush)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_priority_message_queue.o(i.test_tos_priority_message_queue_pend)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_priority_message_queue.o(i.test_tos_priority_message_queue_pend_timed)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_priority_message_queue.o(i.test_tos_priority_message_queue_post_all)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_sem.o(i.test_tos_sem_pend)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_sem.o(i.test_tos_sem_pend_timed)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_sem.o(i.test_tos_sem_post_all)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_task.o(i.test_tos_task_delay_abort)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_task.o(i.test_tos_task_suspend_resume)
 <LI><a href="#[61]">test_count_inc</a> from test_utils.o(i.test_count_inc) referenced from suit_task.o(i.test_tos_task_yeild)
 <LI><a href="#[6a]">test_event_pend_all_task_entry</a> from suit_event.o(i.test_event_pend_all_task_entry) referenced from suit_event.o(i.test_tos_event_pend_all)
 <LI><a href="#[6b]">test_event_pend_any_task_entry</a> from suit_event.o(i.test_event_pend_any_task_entry) referenced from suit_event.o(i.test_tos_event_pend_any)
 <LI><a href="#[6c]">test_event_pend_timed_task_entry</a> from suit_event.o(i.test_event_pend_timed_task_entry) referenced from suit_event.o(i.test_tos_event_pend_timed)
 <LI><a href="#[6d]">test_event_post_keep_task_entry</a> from suit_event.o(i.test_event_post_keep_task_entry) referenced from suit_event.o(i.test_tos_event_post_keep)
 <LI><a href="#[6e]">test_mail_queue_pend_task_entry</a> from suit_mail_queue.o(i.test_mail_queue_pend_task_entry) referenced from suit_mail_queue.o(i.test_tos_mail_queue_flush)
 <LI><a href="#[6e]">test_mail_queue_pend_task_entry</a> from suit_mail_queue.o(i.test_mail_queue_pend_task_entry) referenced from suit_mail_queue.o(i.test_tos_mail_queue_pend)
 <LI><a href="#[6e]">test_mail_queue_pend_task_entry</a> from suit_mail_queue.o(i.test_mail_queue_pend_task_entry) referenced from suit_mail_queue.o(i.test_tos_mail_queue_post_all)
 <LI><a href="#[6f]">test_mail_queue_pend_timed_task_entry</a> from suit_mail_queue.o(i.test_mail_queue_pend_timed_task_entry) referenced from suit_mail_queue.o(i.test_tos_mail_queue_pend_timed)
 <LI><a href="#[70]">test_message_queue_pend_task_entry</a> from suit_message_queue.o(i.test_message_queue_pend_task_entry) referenced from suit_message_queue.o(i.test_tos_message_queue_flush)
 <LI><a href="#[70]">test_message_queue_pend_task_entry</a> from suit_message_queue.o(i.test_message_queue_pend_task_entry) referenced from suit_message_queue.o(i.test_tos_message_queue_pend)
 <LI><a href="#[70]">test_message_queue_pend_task_entry</a> from suit_message_queue.o(i.test_message_queue_pend_task_entry) referenced from suit_message_queue.o(i.test_tos_message_queue_post_all)
 <LI><a href="#[71]">test_message_queue_pend_timed_task_entry</a> from suit_message_queue.o(i.test_message_queue_pend_timed_task_entry) referenced from suit_message_queue.o(i.test_tos_message_queue_pend_timed)
 <LI><a href="#[63]">test_mutex_holder_entry</a> from suit_mutex.o(i.test_mutex_holder_entry) referenced from suit_mutex.o(i.test_mutex_pend_owner_die)
 <LI><a href="#[64]">test_mutex_killer_entry</a> from suit_mutex.o(i.test_mutex_killer_entry) referenced from suit_mutex.o(i.test_mutex_pend_owner_die)
 <LI><a href="#[62]">test_mutex_pend_destroy_entry</a> from suit_mutex.o(i.test_mutex_pend_destroy_entry) referenced from suit_mutex.o(i.test_mutex_pend_destroy)
 <LI><a href="#[72]">test_mutex_pend_task_entry</a> from suit_mutex.o(i.test_mutex_pend_task_entry) referenced from suit_mutex.o(i.test_tos_mutex_pend)
 <LI><a href="#[73]">test_mutex_pend_timed_task_entry</a> from suit_mutex.o(i.test_mutex_pend_timed_task_entry) referenced from suit_mutex.o(i.test_tos_mutex_pend_timed)
 <LI><a href="#[74]">test_prio_mail_queue_pend_task_entry</a> from suit_priority_mail_queue.o(i.test_prio_mail_queue_pend_task_entry) referenced from suit_priority_mail_queue.o(i.test_tos_prio_mail_queue_flush)
 <LI><a href="#[74]">test_prio_mail_queue_pend_task_entry</a> from suit_priority_mail_queue.o(i.test_prio_mail_queue_pend_task_entry) referenced from suit_priority_mail_queue.o(i.test_tos_prio_mail_queue_pend)
 <LI><a href="#[74]">test_prio_mail_queue_pend_task_entry</a> from suit_priority_mail_queue.o(i.test_prio_mail_queue_pend_task_entry) referenced from suit_priority_mail_queue.o(i.test_tos_prio_mail_queue_post_all)
 <LI><a href="#[75]">test_prio_mail_queue_pend_timed_task_entry</a> from suit_priority_mail_queue.o(i.test_prio_mail_queue_pend_timed_task_entry) referenced from suit_priority_mail_queue.o(i.test_tos_prio_mail_queue_pend_timed)
 <LI><a href="#[76]">test_priority_message_queue_pend_task_entry</a> from suit_priority_message_queue.o(i.test_priority_message_queue_pend_task_entry) referenced from suit_priority_message_queue.o(i.test_tos_priority_message_queue_flush)
 <LI><a href="#[76]">test_priority_message_queue_pend_task_entry</a> from suit_priority_message_queue.o(i.test_priority_message_queue_pend_task_entry) referenced from suit_priority_message_queue.o(i.test_tos_priority_message_queue_pend)
 <LI><a href="#[76]">test_priority_message_queue_pend_task_entry</a> from suit_priority_message_queue.o(i.test_priority_message_queue_pend_task_entry) referenced from suit_priority_message_queue.o(i.test_tos_priority_message_queue_post_all)
 <LI><a href="#[77]">test_priority_message_queue_pend_timed_task_entry</a> from suit_priority_message_queue.o(i.test_priority_message_queue_pend_timed_task_entry) referenced from suit_priority_message_queue.o(i.test_tos_priority_message_queue_pend_timed)
 <LI><a href="#[78]">test_sem_pend_task_entry</a> from suit_sem.o(i.test_sem_pend_task_entry) referenced from suit_sem.o(i.test_tos_sem_pend)
 <LI><a href="#[78]">test_sem_pend_task_entry</a> from suit_sem.o(i.test_sem_pend_task_entry) referenced from suit_sem.o(i.test_tos_sem_post_all)
 <LI><a href="#[79]">test_sem_pend_timed_task_entry</a> from suit_sem.o(i.test_sem_pend_timed_task_entry) referenced from suit_sem.o(i.test_tos_sem_pend_timed)
 <LI><a href="#[7a]">test_task_entry</a> from suit_task.o(i.test_task_entry) referenced from suit_task.o(i.test_tos_task_create)
 <LI><a href="#[7a]">test_task_entry</a> from suit_task.o(i.test_task_entry) referenced from suit_task.o(i.test_tos_task_delay_abort)
 <LI><a href="#[7a]">test_task_entry</a> from suit_task.o(i.test_task_entry) referenced from suit_task.o(i.test_tos_task_destroy)
 <LI><a href="#[7a]">test_task_entry</a> from suit_task.o(i.test_task_entry) referenced from suit_task.o(i.test_tos_task_prio_change)
 <LI><a href="#[7a]">test_task_entry</a> from suit_task.o(i.test_task_entry) referenced from suit_task.o(i.test_tos_task_suspend_resume)
 <LI><a href="#[7a]">test_task_entry</a> from suit_task.o(i.test_task_entry) referenced from suit_task.o(i.test_tos_task_yeild)
 <LI><a href="#[7b]">test_timer_call_back_dummy</a> from suit_timer.o(i.test_timer_call_back_dummy) referenced from suit_timer.o(i.test_tos_timer_create)
 <LI><a href="#[7b]">test_timer_call_back_dummy</a> from suit_timer.o(i.test_timer_call_back_dummy) referenced from suit_timer.o(i.test_tos_timer_stop)
 <LI><a href="#[7c]">test_timer_oneshot_call_back</a> from suit_timer.o(i.test_timer_oneshot_call_back) referenced from suit_timer.o(i.test_tos_timer_oneshot_functional)
 <LI><a href="#[7d]">test_timer_periodic_call_back</a> from suit_timer.o(i.test_timer_periodic_call_back) referenced from suit_timer.o(i.test_tos_timer_periodic_functional)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(.text)
</UL>
<P><STRONG><a name="[23d]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[80]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[88]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[23e]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[23f]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[240]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[241]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[242]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[22c]"></a>port_int_disable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_int_disable
</UL>

<P><STRONG><a name="[243]"></a>port_int_enable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>port_cpsr_save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>

<P><STRONG><a name="[22a]"></a>port_cpsr_restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>

<P><STRONG><a name="[229]"></a>port_clz</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>

<P><STRONG><a name="[102]"></a>port_sched_start</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sched_start
</UL>

<P><STRONG><a name="[fc]"></a>port_context_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_context_switch
</UL>

<P><STRONG><a name="[100]"></a>port_irq_context_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_context_switch
</UL>

<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_pend
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_pend
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_push
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_pop
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin_heap_percolate_down
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin_heap_do_percolate_up
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_q_do_enqueue
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_q_do_dequeue
</UL>

<P><STRONG><a name="[1db]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_struct_enqueue_limit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_struct_enqueue
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_int_enqueue
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_flush
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_enqueue_limit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_enqueue
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_push_limit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_min_push
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_min_int_push
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_max_push
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_max_int_push
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_flush
</UL>

<P><STRONG><a name="[244]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[245]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GREATEST_INIT
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_buffer_test_name
</UL>

<P><STRONG><a name="[247]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[10e]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_name_match
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_buffer_test_name
</UL>

<P><STRONG><a name="[1de]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_struct_enqueue_limit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_struct_enqueue
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_enqueue_limit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_enqueue
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_post_all
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_pend_timed
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_pend
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_post_all
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_pend_timed
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_pend
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_push_limit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_min_push
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_max_push
</UL>

<P><STRONG><a name="[10f]"></a>strncat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_buffer_test_name
</UL>

<P><STRONG><a name="[114]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_name_match
</UL>

<P><STRONG><a name="[164]"></a>setjmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, setjmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_ring_queue
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_priority_queue
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_priority_message_queue
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_priority_mail_queue
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_message_queue
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_mail_queue
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_char_fifo
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_binary_heap
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_timer
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_task
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_sem
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_mutex
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_mmblk
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_event
</UL>

<P><STRONG><a name="[248]"></a>longjmp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, setjmp.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[249]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[24a]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[24b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>DHT11_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dht11_bus.o(i.DHT11_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DHT11_Init &rArr; DHT11_Mode_Out_PP &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Mode_Out_PP
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI2_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mcu_init.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[8e]"></a>GREATEST_INIT</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, test_main.o(i.GREATEST_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GREATEST_INIT
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_entry
</UL>

<P><STRONG><a name="[90]"></a>GREATEST_PRINT_REPORT</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, test_main.o(i.GREATEST_PRINT_REPORT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GREATEST_PRINT_REPORT &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_counts_and_reset_suite
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_entry
</UL>

<P><STRONG><a name="[a9]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[93]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[95]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[8c]"></a>HAL_GPIO_Init</STRONG> (Thumb, 428 bytes, Stack size 20 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Mode_Out_PP
</UL>

<P><STRONG><a name="[8b]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Byte
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>

<P><STRONG><a name="[94]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
</UL>

<P><STRONG><a name="[c6]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[96]"></a>HAL_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[98]"></a>HAL_InitTick</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[99]"></a>HAL_MspInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32l4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b2]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[9b]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[97]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[cd]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c5]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[cc]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ce]"></a>HAL_RCCEx_EnableMSIPLLMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_EnableMSIPLLMode))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[9e]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 894 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a0]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a3]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[a2]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[a4]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[a1]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[a5]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1660 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[9a]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[ab]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[aa]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[a7]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[ad]"></a>HAL_UART_Init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[ae]"></a>HAL_UART_MspInit</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[b3]"></a>HAL_UART_Transmit</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[cf]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>IIC_Start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, oled.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Data
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Command
</UL>

<P><STRONG><a name="[b6]"></a>IIC_Stop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, oled.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Data
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Command
</UL>

<P><STRONG><a name="[b7]"></a>IIC_Wait_Ack</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, oled.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Data
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Command
</UL>

<P><STRONG><a name="[42]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LPUART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>MX_GPIO_Init</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_GPIO_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[b9]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[bb]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>OLED_Clear</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, oled.o(i.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_Clear &rArr; OLED_WR_Byte &rArr; Write_IIC_Data &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[be]"></a>OLED_Init</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, oled.o(i.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OLED_Init &rArr; OLED_Clear &rArr; OLED_WR_Byte &rArr; Write_IIC_Data &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[bf]"></a>OLED_Set_Pos</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, oled.o(i.OLED_Set_Pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_Set_Pos &rArr; OLED_WR_Byte &rArr; Write_IIC_Data &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>

<P><STRONG><a name="[c0]"></a>OLED_ShowChar</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, oled.o(i.OLED_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte &rArr; Write_IIC_Data &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>

<P><STRONG><a name="[c1]"></a>OLED_ShowChinese</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, oled.o(i.OLED_ShowChinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OLED_ShowChinese &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte &rArr; Write_IIC_Data &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[c2]"></a>OLED_ShowString</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, oled.o(i.OLED_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte &rArr; Write_IIC_Data &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[bd]"></a>OLED_WR_Byte</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, oled.o(i.OLED_WR_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OLED_WR_Byte &rArr; Write_IIC_Data &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Data
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
</UL>

<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; tos_tick_handler &rArr; tick_update &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_enter
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>SystemClock_Config</STRONG> (Thumb, 214 bytes, Stack size 184 bytes, mcu_init.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_EnableMSIPLLMode
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[4d]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, system_stm32l4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[b1]"></a>UART_CheckIdleState</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[af]"></a>UART_SetConfig</STRONG> (Thumb, 1000 bytes, Stack size 40 bytes, stm32l4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[b4]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>Write_IIC_Byte</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, oled.o(i.Write_IIC_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Data
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Command
</UL>

<P><STRONG><a name="[c4]"></a>Write_IIC_Command</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, oled.o(i.Write_IIC_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Write_IIC_Command &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Byte
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[c3]"></a>Write_IIC_Data</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, oled.o(i.Write_IIC_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Write_IIC_Data &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Byte
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[d1]"></a>__0fprintf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0fprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[24e]"></a>__1fprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0fprintf$8), UNUSED)

<P><STRONG><a name="[92]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0fprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GREATEST_PRINT_REPORT
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_suite
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_suite_pre
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_do_skip
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_do_pass
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_do_fail
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_pre
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_post
</UL>

<P><STRONG><a name="[d3]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[24f]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[125]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_enqueue
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_q_prio_mgr_slot_enqueue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_q_prio_mgr_slot_dequeue
</UL>

<P><STRONG><a name="[250]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[251]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[252]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[7f]"></a>application_entry</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, test_main.o(i.application_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = application_entry &rArr; greatest_run_suite &rArr; greatest_suite_pre &rArr; greatest_name_match &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_all_passed
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GREATEST_PRINT_REPORT
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GREATEST_INIT
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_run_suite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>board_init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, mcu_init.o(i.board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = board_init &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>cpu_context_switch</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(i.cpu_context_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = cpu_context_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
</UL>

<P><STRONG><a name="[fd]"></a>cpu_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tos_cpu.o(i.cpu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cpu_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[ff]"></a>cpu_irq_context_switch</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(i.cpu_irq_context_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = cpu_irq_context_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
</UL>

<P><STRONG><a name="[101]"></a>cpu_sched_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_cpu.o(i.cpu_sched_start))
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_sched_start
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
</UL>

<P><STRONG><a name="[fe]"></a>cpu_systick_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tos_cpu.o(i.cpu_systick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cpu_systick_init &rArr; port_systick_config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_priority_set
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_config
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
</UL>

<P><STRONG><a name="[23b]"></a>cpu_task_stk_init</STRONG> (Thumb, 216 bytes, Stack size 20 bytes, tos_cpu.o(i.cpu_task_stk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cpu_task_stk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[50]"></a>fputc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mcu_init.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printf8.o(i.__0fprintf$8)
<LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[da]"></a>greatest_all_passed</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, test_main.o(i.greatest_all_passed))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_entry
</UL>

<P><STRONG><a name="[118]"></a>greatest_test_post</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, test_main.o(i.greatest_test_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = greatest_test_post &rArr; greatest_do_fail &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_do_skip
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_do_pass
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_do_fail
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_ring_queue
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_priority_queue
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_priority_message_queue
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_priority_mail_queue
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_message_queue
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_mail_queue
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_char_fifo
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_binary_heap
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_timer
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_task
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_sem
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_mutex
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_mmblk
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_event
</UL>

<P><STRONG><a name="[119]"></a>greatest_test_pre</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, test_main.o(i.greatest_test_pre))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = greatest_test_pre &rArr; greatest_name_match &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_name_match
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_buffer_test_name
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_ring_queue
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_priority_queue
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_priority_message_queue
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_priority_mail_queue
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_message_queue
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_mail_queue
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_char_fifo
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_binary_heap
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_timer
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_task
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_sem
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_mutex
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_mmblk
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_event
</UL>

<P><STRONG><a name="[11b]"></a>knl_idle_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, tos_sys.o(i.knl_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = knl_idle_init &rArr; tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[1b9]"></a>knl_is_idle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_idle))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[11d]"></a>knl_is_inirq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_inirq))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmblk_pool_create
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_pend
</UL>

<P><STRONG><a name="[11e]"></a>knl_is_sched_locked</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_sched_locked))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_pend
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_pend
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_pend
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_pend
</UL>

<P><STRONG><a name="[120]"></a>knl_is_self</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_self))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>

<P><STRONG><a name="[1c3]"></a>knl_object_deinit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_sys.o(i.knl_object_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmblk_pool_destroy
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_destroy
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_destroy
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_destroy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_destroy
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_destroy
</UL>

<P><STRONG><a name="[227]"></a>knl_object_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_sys.o(i.knl_object_init))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmblk_pool_create
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_create
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_create
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_create
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_create
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_create
</UL>

<P><STRONG><a name="[228]"></a>knl_object_verify</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_sys.o(i.knl_object_verify))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmblk_pool_destroy
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmblk_free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmblk_alloc
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_flush
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_enqueue
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_destroy
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_dequeue
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_full
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_empty
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_flush
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_destroy
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push_stream
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop_stream
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_is_full
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_is_empty
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_destroy
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_push
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_pop
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_is_full
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_is_empty
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_flush
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_destroy
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_stop
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_start
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_destroy
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_is_full
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_is_empty
</UL>

<P><STRONG><a name="[10b]"></a>knl_sched</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tos_sys.o(i.knl_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = knl_sched &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_context_switch
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_msg_q_do_post
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_pend
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_destroy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_mail_q_do_post
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_destroy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_do_post
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_pend
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_destroy
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mail_q_do_post
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_pend
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_destroy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_do_post
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_pend
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_destroy
</UL>

<P><STRONG><a name="[4c]"></a>main</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = main &rArr; board_init &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[129]"></a>mmheap_init_with_pool</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tos_mmheap.o(i.mmheap_init_with_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = mmheap_init_with_pool &rArr; tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_ctl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[130]"></a>mutex_release</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tos_mutex.o(i.mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_release
</UL>

<P><STRONG><a name="[126]"></a>osKernelInitialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = osKernelInitialize &rArr; tos_knl_init &rArr; mmheap_init_with_pool &rArr; tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errno_knl2cmsis
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>osKernelStart</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = osKernelStart &rArr; tos_knl_start
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errno_knl2cmsis
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>osThreadCreate</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = osThreadCreate &rArr; tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priority_cmsis2knl
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[136]"></a>pend_highest_pending_prio_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tos_pend.o(i.pend_highest_pending_prio_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_highest_pending_prio_get
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
</UL>

<P><STRONG><a name="[234]"></a>pend_highest_pending_task_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_pend.o(i.pend_highest_pending_task_get))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
</UL>

<P><STRONG><a name="[122]"></a>pend_is_nopending</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_pend.o(i.pend_is_nopending))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pend_is_nopending
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_msg_q_do_post
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_destroy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_mail_q_do_post
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_destroy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_do_post
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_destroy
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mail_q_do_post
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_destroy
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_destroy
</UL>

<P><STRONG><a name="[138]"></a>pend_list_adjust</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tos_pend.o(i.pend_list_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pend_list_adjust &rArr; pend_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[13b]"></a>pend_list_remove</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tos_pend.o(i.pend_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pend_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[13c]"></a>pend_object_deinit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tos_pend.o(i.pend_object_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pend_object_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_destroy
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_destroy
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_destroy
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_destroy
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_destroy
</UL>

<P><STRONG><a name="[13e]"></a>pend_object_init</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tos_pend.o(i.pend_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pend_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create_max
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_create
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_create
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_create
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_create
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_create
</UL>

<P><STRONG><a name="[106]"></a>pend_object_verify</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_pend.o(i.pend_object_verify))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_msg_q_do_post
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_pend
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_flush
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_destroy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_mail_q_do_post
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_flush
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_destroy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_do_post
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_pend
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_flush
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_destroy
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mail_q_do_post
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_pend
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_destroy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_do_post
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_pend
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_flush
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_destroy
</UL>

<P><STRONG><a name="[22d]"></a>pend_state2errno</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tos_pend.o(i.pend_state2errno))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_pend
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_pend
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_pend
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_pend
</UL>

<P><STRONG><a name="[13f]"></a>pend_task_block</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, tos_pend.o(i.pend_task_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_pend
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_pend
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_pend
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_pend
</UL>

<P><STRONG><a name="[109]"></a>pend_task_wakeup</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tos_pend.o(i.pend_task_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_one
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_msg_q_task_recv
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_mail_task_recv
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_task_recv
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mail_task_recv
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_do_post
</UL>

<P><STRONG><a name="[144]"></a>pend_wakeup</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tos_pend.o(i.pend_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_one
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
</UL>

<P><STRONG><a name="[131]"></a>pend_wakeup_all</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, tos_pend.o(i.pend_wakeup_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_destroy
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_destroy
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_destroy
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_destroy
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_destroy
</UL>

<P><STRONG><a name="[145]"></a>pend_wakeup_one</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tos_pend.o(i.pend_wakeup_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = pend_wakeup_one &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
</UL>

<P><STRONG><a name="[104]"></a>port_systick_config</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, port_c.o(i.port_systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = port_systick_config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
</UL>

<P><STRONG><a name="[103]"></a>port_systick_priority_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, port_c.o(i.port_systick_priority_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = port_systick_priority_set &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
</UL>

<P><STRONG><a name="[143]"></a>readyqueue_add</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tos_sched.o(i.readyqueue_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
</UL>

<P><STRONG><a name="[15c]"></a>readyqueue_add_head</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, tos_sched.o(i.readyqueue_add_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readyqueue_add_head
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_mark
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[15b]"></a>readyqueue_add_tail</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tos_sched.o(i.readyqueue_add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[11f]"></a>readyqueue_highest_ready_task_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_highest_ready_task_get))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
</UL>

<P><STRONG><a name="[22e]"></a>readyqueue_init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_init))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[140]"></a>readyqueue_remove</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tos_sched.o(i.readyqueue_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_highest_get
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
</UL>

<P><STRONG><a name="[5b]"></a>suit_binary_heap</STRONG> (Thumb, 308 bytes, Stack size 8 bytes, suit_binary_heap.o(i.suit_binary_heap))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = suit_binary_heap &rArr; test_tos_binary_heap_push_limit &rArr; tos_bin_heap_pop &rArr; bin_heap_percolate_down &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_pre
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_post
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_push_limit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_min_push
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_min_int_push
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_max_push
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_max_int_push
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_destroy
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_create
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_main.o(i.application_entry)
</UL>
<P><STRONG><a name="[58]"></a>suit_char_fifo</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, suit_char_fifo.o(i.suit_char_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = suit_char_fifo &rArr; test_tos_fifo_stream_push &rArr; tos_chr_fifo_pop_stream &rArr; tos_ring_q_dequeue &rArr; tos_ring_q_is_empty &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_pre
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_post
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_fifo_stream_push
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_fifo_destory
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_fifo_create
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_fifo_char_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_main.o(i.application_entry)
</UL>
<P><STRONG><a name="[56]"></a>suit_event</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, suit_event.o(i.suit_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = suit_event &rArr; test_tos_event_pend_timed &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_pre
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_post
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_post_keep
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_timed
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_any
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_all
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_destroy
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_main.o(i.application_entry)
</UL>
<P><STRONG><a name="[5a]"></a>suit_mail_queue</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, suit_mail_queue.o(i.suit_mail_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = suit_mail_queue &rArr; test_tos_mail_queue_flush &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_pre
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_post
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_post_all
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_pend_timed
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_pend
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_flush
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_destroy
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_main.o(i.application_entry)
</UL>
<P><STRONG><a name="[59]"></a>suit_message_queue</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, suit_message_queue.o(i.suit_message_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = suit_message_queue &rArr; test_tos_message_queue_pend_timed &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_pre
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_post
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_post_all
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_pend_timed
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_pend
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_flush
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_destroy
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_main.o(i.application_entry)
</UL>
<P><STRONG><a name="[52]"></a>suit_mmblk</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, suit_mmblk.o(i.suit_mmblk))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = suit_mmblk &rArr; greatest_test_pre &rArr; greatest_name_match &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mmblk_pool_destroy
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mmblk_pool_create
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mmblk_free
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mmblk_alloc
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_pre
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_main.o(i.application_entry)
</UL>
<P><STRONG><a name="[54]"></a>suit_mutex</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, suit_mutex.o(i.suit_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = suit_mutex &rArr; test_tos_mutex_pend_timed &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_post
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_pend_timed
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_pend
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_destroy
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_create
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_owner_die
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_destroy
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_pre
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_main.o(i.application_entry)
</UL>
<P><STRONG><a name="[5e]"></a>suit_priority_mail_queue</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, suit_priority_mail_queue.o(i.suit_priority_mail_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = suit_priority_mail_queue &rArr; test_tos_prio_mail_queue_pend &rArr; tos_prio_mail_q_post &rArr; prio_mail_q_do_post &rArr; tos_prio_q_enqueue &rArr; prio_q_do_enqueue &rArr; prio_q_prio_mgr_slot_enqueue &rArr; tos_bin_heap_push &rArr; bin_heap_percolate_up &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_pre
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_post
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_post_all
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_pend_timed
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_pend
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_flush
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_destroy
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_main.o(i.application_entry)
</UL>
<P><STRONG><a name="[5d]"></a>suit_priority_message_queue</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, suit_priority_message_queue.o(i.suit_priority_message_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = suit_priority_message_queue &rArr; test_tos_priority_message_queue_pend_timed &rArr; tos_prio_msg_q_post &rArr; prio_msg_q_do_post &rArr; tos_prio_q_enqueue &rArr; prio_q_do_enqueue &rArr; prio_q_prio_mgr_slot_enqueue &rArr; tos_bin_heap_push &rArr; bin_heap_percolate_up &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_pre
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_post
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_post_all
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_pend_timed
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_pend
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_flush
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_destroy
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_main.o(i.application_entry)
</UL>
<P><STRONG><a name="[5c]"></a>suit_priority_queue</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, suit_priority_queue.o(i.suit_priority_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = suit_priority_queue &rArr; test_tos_priority_queue_enqueue_limit &rArr; tos_prio_q_dequeue &rArr; prio_q_prio_mgr_slot_dequeue &rArr; tos_bin_heap_pop &rArr; bin_heap_percolate_down &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_pre
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_post
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_int_enqueue
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_flush
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_enqueue_limit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_enqueue
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_destroy
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_main.o(i.application_entry)
</UL>
<P><STRONG><a name="[57]"></a>suit_ring_queue</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, suit_ring_queue.o(i.suit_ring_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = suit_ring_queue &rArr; test_tos_ring_queue_struct_enqueue_limit &rArr; tos_ring_q_dequeue &rArr; tos_ring_q_is_empty &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_pre
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_post
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_u8_enqueue_limit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_u8_enqueue
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_struct_enqueue_limit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_struct_enqueue
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_flush
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_destroy
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_main.o(i.application_entry)
</UL>
<P><STRONG><a name="[55]"></a>suit_sem</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, suit_sem.o(i.suit_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = suit_sem &rArr; test_tos_sem_pend_timed &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_post_all
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_pend_timed
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_pend
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_destroy
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_create
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_pre
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_main.o(i.application_entry)
</UL>
<P><STRONG><a name="[51]"></a>suit_task</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, suit_task.o(i.suit_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = suit_task &rArr; test_tos_task_yeild &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_yeild
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_suspend_resume
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_prio_change
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_destroy
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_delay_abort
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_delay
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_create
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_pre
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_main.o(i.application_entry)
</UL>
<P><STRONG><a name="[53]"></a>suit_timer</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, suit_timer.o(i.suit_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = suit_timer &rArr; test_tos_timer_stop &rArr; tos_task_delay &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_timer_stop
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_timer_periodic_functional
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_timer_oneshot_functional
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_timer_destroy
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_timer_create
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_pre
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_main.o(i.application_entry)
</UL>
<P><STRONG><a name="[11a]"></a>task_free_all</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tos_task.o(i.task_free_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = task_free_all &rArr; task_free &rArr; tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_entry
</UL>

<P><STRONG><a name="[66]"></a>test_bin_heap_cmp_dummy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, suit_binary_heap.o(i.test_bin_heap_cmp_dummy))
<BR>[Address Reference Count : 1]<UL><LI> suit_binary_heap.o(i.test_tos_binary_heap_create)
</UL>
<P><STRONG><a name="[65]"></a>test_bin_heap_max_cmp_dummy</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, suit_binary_heap.o(i.test_bin_heap_max_cmp_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = test_bin_heap_max_cmp_dummy
</UL>
<BR>[Address Reference Count : 3]<UL><LI> suit_binary_heap.o(i.test_tos_binary_flush)
<LI> suit_binary_heap.o(i.test_tos_binary_heap_max_push)
<LI> suit_binary_heap.o(i.test_tos_binary_heap_push_limit)
</UL>
<P><STRONG><a name="[67]"></a>test_bin_heap_max_int_cmp_dummy</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, suit_binary_heap.o(i.test_bin_heap_max_int_cmp_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = test_bin_heap_max_int_cmp_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> suit_binary_heap.o(i.test_tos_binary_heap_max_int_push)
</UL>
<P><STRONG><a name="[69]"></a>test_bin_heap_min_cmp_dummy</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, suit_binary_heap.o(i.test_bin_heap_min_cmp_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = test_bin_heap_min_cmp_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> suit_binary_heap.o(i.test_tos_binary_heap_min_push)
</UL>
<P><STRONG><a name="[68]"></a>test_bin_heap_min_int_cmp_dummy</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, suit_binary_heap.o(i.test_bin_heap_min_int_cmp_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = test_bin_heap_min_int_cmp_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> suit_binary_heap.o(i.test_tos_binary_heap_min_int_push)
</UL>
<P><STRONG><a name="[1cf]"></a>test_context_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, test_utils.o(i.test_context_reset))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_post_all
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_pend_timed
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_pend
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_pend_timed
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_pend
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_destroy
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_post_all
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_pend_timed
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_pend
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_flush
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_post_all
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_pend_timed
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_pend
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_flush
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_post_all
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_pend_timed
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_pend
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_flush
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_post_all
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_pend_timed
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_pend
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_flush
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_post_keep
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_timed
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_any
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_all
</UL>

<P><STRONG><a name="[1c5]"></a>test_context_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, test_utils.o(i.test_context_set))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sem_pend_timed_task_entry
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sem_pend_task_entry
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_timed_task_entry
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_task_entry
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_destroy_entry
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_priority_message_queue_pend_timed_task_entry
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_priority_message_queue_pend_task_entry
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_prio_mail_queue_pend_timed_task_entry
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_prio_mail_queue_pend_task_entry
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_message_queue_pend_timed_task_entry
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_message_queue_pend_task_entry
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mail_queue_pend_timed_task_entry
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mail_queue_pend_task_entry
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_event_post_keep_task_entry
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_event_pend_timed_task_entry
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_event_pend_any_task_entry
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_event_pend_all_task_entry
</UL>

<P><STRONG><a name="[61]"></a>test_count_inc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, test_utils.o(i.test_count_inc))
<BR>[Address Reference Count : 29]<UL><LI> suit_event.o(i.test_tos_event_pend_all)
<LI> suit_mutex.o(i.test_tos_mutex_pend)
<LI> suit_sem.o(i.test_tos_sem_pend)
<LI> suit_sem.o(i.test_tos_sem_pend_timed)
<LI> suit_sem.o(i.test_tos_sem_post_all)
<LI> suit_task.o(i.test_tos_task_delay_abort)
<LI> suit_mutex.o(i.test_mutex_pend_destroy)
<LI> suit_mail_queue.o(i.test_tos_mail_queue_flush)
<LI> suit_mail_queue.o(i.test_tos_mail_queue_pend)
<LI> suit_task.o(i.test_tos_task_suspend_resume)
<LI> suit_task.o(i.test_tos_task_yeild)
<LI> suit_message_queue.o(i.test_tos_message_queue_flush)
<LI> suit_message_queue.o(i.test_tos_message_queue_pend)
<LI> suit_message_queue.o(i.test_tos_message_queue_pend_timed)
<LI> suit_mail_queue.o(i.test_tos_mail_queue_pend_timed)
<LI> suit_mail_queue.o(i.test_tos_mail_queue_post_all)
<LI> suit_message_queue.o(i.test_tos_message_queue_post_all)
<LI> suit_priority_mail_queue.o(i.test_tos_prio_mail_queue_flush)
<LI> suit_priority_message_queue.o(i.test_tos_priority_message_queue_flush)
<LI> suit_event.o(i.test_tos_event_pend_any)
<LI> suit_event.o(i.test_tos_event_pend_timed)
<LI> suit_event.o(i.test_tos_event_post_keep)
<LI> suit_mutex.o(i.test_tos_mutex_pend_timed)
<LI> suit_priority_message_queue.o(i.test_tos_priority_message_queue_pend)
<LI> suit_priority_message_queue.o(i.test_tos_priority_message_queue_pend_timed)
<LI> suit_priority_message_queue.o(i.test_tos_priority_message_queue_post_all)
<LI> suit_priority_mail_queue.o(i.test_tos_prio_mail_queue_pend)
<LI> suit_priority_mail_queue.o(i.test_tos_prio_mail_queue_pend_timed)
<LI> suit_priority_mail_queue.o(i.test_tos_prio_mail_queue_post_all)
</UL>
<P><STRONG><a name="[1d0]"></a>test_count_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, test_utils.o(i.test_count_reset))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_yeild
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_suspend_resume
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_delay_abort
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_post_all
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_pend_timed
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_pend
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_pend_timed
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_pend
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_destroy
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_post_all
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_pend_timed
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_pend
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_flush
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_post_all
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_pend_timed
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_pend
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_flush
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_post_all
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_pend_timed
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_pend
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_flush
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_post_all
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_pend_timed
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_pend
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_flush
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_post_keep
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_timed
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_any
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_all
</UL>

<P><STRONG><a name="[1e3]"></a>test_err_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, test_utils.o(i.test_err_reset))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_post_all
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_pend_timed
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_pend_timed
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_pend
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_post_all
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_pend_timed
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_flush
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_post_all
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_pend_timed
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_flush
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_post_all
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_pend_timed
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_flush
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_post_all
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_pend_timed
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_flush
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_timed
</UL>

<P><STRONG><a name="[1c7]"></a>test_err_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, test_utils.o(i.test_err_set))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sem_pend_timed_task_entry
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sem_pend_task_entry
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_timed_task_entry
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_task_entry
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_destroy_entry
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_priority_message_queue_pend_timed_task_entry
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_priority_message_queue_pend_task_entry
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_prio_mail_queue_pend_timed_task_entry
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_prio_mail_queue_pend_task_entry
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_message_queue_pend_timed_task_entry
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_message_queue_pend_task_entry
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mail_queue_pend_timed_task_entry
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mail_queue_pend_task_entry
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_event_post_keep_task_entry
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_event_pend_timed_task_entry
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_event_pend_any_task_entry
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_event_pend_all_task_entry
</UL>

<P><STRONG><a name="[1e1]"></a>test_event_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, test_utils.o(i.test_event_reset))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_post_keep
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_any
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_all
</UL>

<P><STRONG><a name="[1c8]"></a>test_event_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, test_utils.o(i.test_event_set))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_event_post_keep_task_entry
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_event_pend_timed_task_entry
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_event_pend_any_task_entry
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_event_pend_all_task_entry
</UL>

<P><STRONG><a name="[1f2]"></a>test_mail_reset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, test_utils.o(i.test_mail_reset))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_pend_timed
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_pend
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_pend_timed
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_pend
</UL>

<P><STRONG><a name="[1cb]"></a>test_mail_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, test_utils.o(i.test_mail_set))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_prio_mail_queue_pend_timed_task_entry
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_prio_mail_queue_pend_task_entry
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mail_queue_pend_timed_task_entry
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mail_queue_pend_task_entry
</UL>

<P><STRONG><a name="[1f8]"></a>test_msg_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, test_utils.o(i.test_msg_reset))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_pend_timed
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_pend
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_pend_timed
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_pend
</UL>

<P><STRONG><a name="[1cd]"></a>test_msg_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, test_utils.o(i.test_msg_set))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_priority_message_queue_pend_timed_task_entry
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_priority_message_queue_pend_task_entry
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_message_queue_pend_timed_task_entry
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_message_queue_pend_task_entry
</UL>

<P><STRONG><a name="[1d4]"></a>test_task_hook_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, test_utils.o(i.test_task_hook_reset))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_yeild
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_suspend_resume
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_delay_abort
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_post_all
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_pend_timed
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_pend_timed
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_pend
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_destroy
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_post_all
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_pend_timed
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_flush
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_post_all
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_pend_timed
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_flush
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_post_all
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_pend_timed
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_flush
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_post_all
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_pend_timed
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_flush
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_post_keep
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_timed
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_any
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_all
</UL>

<P><STRONG><a name="[1d1]"></a>test_task_hook_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, test_utils.o(i.test_task_hook_set))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_yeild
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_suspend_resume
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_delay_abort
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_post_all
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_pend_timed
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_pend
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_pend_timed
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_pend
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_destroy
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_post_all
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_pend_timed
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_pend
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_flush
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_post_all
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_pend_timed
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_pend
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_flush
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_post_all
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_pend_timed
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_pend
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_flush
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_post_all
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_pend_timed
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_pend
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_flush
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_post_keep
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_timed
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_any
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_all
</UL>

<P><STRONG><a name="[141]"></a>tick_list_add</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tos_tick.o(i.tick_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
</UL>

<P><STRONG><a name="[142]"></a>tick_list_remove</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tos_tick.o(i.tick_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = tick_list_remove &rArr; tick_task_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[222]"></a>tick_update</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, tos_tick.o(i.tick_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tick_update &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
</UL>

<P><STRONG><a name="[22f]"></a>timer_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_timer.o(i.timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[225]"></a>timer_update</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, tos_timer.o(i.timer_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = timer_update &rArr; timer_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
</UL>

<P><STRONG><a name="[153]"></a>tos_bin_heap_create</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tos_binary_heap.o(i.tos_bin_heap_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tos_bin_heap_create
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_push_limit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_min_push
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_min_int_push
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_max_push
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_max_int_push
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_create
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_flush
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_q_prio_mgr_init
</UL>

<P><STRONG><a name="[151]"></a>tos_bin_heap_destroy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tos_binary_heap.o(i.tos_bin_heap_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tos_bin_heap_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_push_limit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_min_push
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_min_int_push
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_max_push
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_max_int_push
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_destroy
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_create
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_flush
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_q_prio_mgr_deinit
</UL>

<P><STRONG><a name="[155]"></a>tos_bin_heap_flush</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tos_binary_heap.o(i.tos_bin_heap_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_bin_heap_flush &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_flush
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_q_prio_mgr_reset
</UL>

<P><STRONG><a name="[1dd]"></a>tos_bin_heap_is_empty</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tos_binary_heap.o(i.tos_bin_heap_is_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_bin_heap_is_empty &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_push_limit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_min_push
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_min_int_push
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_max_push
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_max_int_push
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_flush
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_pop
</UL>

<P><STRONG><a name="[1dc]"></a>tos_bin_heap_is_full</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tos_binary_heap.o(i.tos_bin_heap_is_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_bin_heap_is_full &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_push_limit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_min_push
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_min_int_push
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_max_push
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_max_int_push
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_flush
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_push
</UL>

<P><STRONG><a name="[157]"></a>tos_bin_heap_pop</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, tos_binary_heap.o(i.tos_bin_heap_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tos_bin_heap_pop &rArr; bin_heap_percolate_down &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_is_empty
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin_heap_percolate_down
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_push_limit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_min_push
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_min_int_push
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_max_push
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_max_int_push
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_flush
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_q_prio_mgr_slot_dequeue
</UL>

<P><STRONG><a name="[15a]"></a>tos_bin_heap_push</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, tos_binary_heap.o(i.tos_bin_heap_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tos_bin_heap_push &rArr; bin_heap_percolate_up &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_is_full
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin_heap_percolate_up
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_push_limit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_min_push
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_min_int_push
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_max_push
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_heap_max_int_push
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_binary_flush
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_q_prio_mgr_slot_enqueue
</UL>

<P><STRONG><a name="[1e6]"></a>tos_chr_fifo_create</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, tos_char_fifo.o(i.tos_chr_fifo_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tos_chr_fifo_create &rArr; tos_ring_q_create
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_fifo_stream_push
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_fifo_create
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_fifo_char_push
</UL>

<P><STRONG><a name="[1e9]"></a>tos_chr_fifo_destroy</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tos_char_fifo.o(i.tos_chr_fifo_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tos_chr_fifo_destroy &rArr; tos_ring_q_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_deinit
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_fifo_destory
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_fifo_create
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_fifo_char_push
</UL>

<P><STRONG><a name="[1ed]"></a>tos_chr_fifo_is_empty</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tos_char_fifo.o(i.tos_chr_fifo_is_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = tos_chr_fifo_is_empty &rArr; tos_ring_q_is_empty &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_fifo_stream_push
</UL>

<P><STRONG><a name="[1eb]"></a>tos_chr_fifo_is_full</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tos_char_fifo.o(i.tos_chr_fifo_is_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = tos_chr_fifo_is_full &rArr; tos_ring_q_is_full &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_full
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_fifo_stream_push
</UL>

<P><STRONG><a name="[1e8]"></a>tos_chr_fifo_pop</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tos_char_fifo.o(i.tos_chr_fifo_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tos_chr_fifo_pop &rArr; tos_ring_q_dequeue &rArr; tos_ring_q_is_empty &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_fifo_char_push
</UL>

<P><STRONG><a name="[1ec]"></a>tos_chr_fifo_pop_stream</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, tos_char_fifo.o(i.tos_chr_fifo_pop_stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tos_chr_fifo_pop_stream &rArr; tos_ring_q_dequeue &rArr; tos_ring_q_is_empty &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_fifo_stream_push
</UL>

<P><STRONG><a name="[1e7]"></a>tos_chr_fifo_push</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, tos_char_fifo.o(i.tos_chr_fifo_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tos_chr_fifo_push &rArr; tos_ring_q_enqueue &rArr; tos_ring_q_is_full &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_fifo_char_push
</UL>

<P><STRONG><a name="[1ea]"></a>tos_chr_fifo_push_stream</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, tos_char_fifo.o(i.tos_chr_fifo_push_stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tos_chr_fifo_push_stream &rArr; tos_ring_q_enqueue &rArr; tos_ring_q_is_full &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_fifo_stream_push
</UL>

<P><STRONG><a name="[10c]"></a>tos_cpu_clz</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_cpu.o(i.tos_cpu_clz))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_fls
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_highest_get
</UL>

<P><STRONG><a name="[10a]"></a>tos_cpu_cpsr_restore</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_cpu.o(i.tos_cpu_cpsr_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmblk_free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmblk_alloc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_msg_q_do_post
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_flush
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_enqueue
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_dequeue
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_pend
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_destroy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_mail_q_do_post
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_destroy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_do_post
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_pend
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_destroy
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mail_q_do_post
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_full
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_empty
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_flush
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push_stream
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop_stream
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_push
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_pop
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_is_full
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_is_empty
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_flush
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_pend
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_destroy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_do_post
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_is_full
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_is_empty
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_pend
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_destroy
</UL>

<P><STRONG><a name="[107]"></a>tos_cpu_cpsr_save</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(i.tos_cpu_cpsr_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmblk_free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmblk_alloc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_msg_q_do_post
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_flush
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_enqueue
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_dequeue
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_pend
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_destroy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_mail_q_do_post
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_destroy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_do_post
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_pend
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_destroy
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mail_q_do_post
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_full
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_empty
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_flush
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push_stream
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop_stream
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_push
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_pop
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_is_full
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_is_empty
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_flush
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_pend
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_destroy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_do_post
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_is_full
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_is_empty
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_pend
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_destroy
</UL>

<P><STRONG><a name="[159]"></a>tos_cpu_int_disable</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(i.tos_cpu_int_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_cpu_int_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_enqueue
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_q_prio_mgr_slot_enqueue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_q_prio_mgr_slot_dequeue
</UL>

<P><STRONG><a name="[1df]"></a>tos_event_create</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tos_event.o(i.tos_event_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tos_event_create &rArr; pend_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_post_keep
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_timed
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_any
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_all
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_create
</UL>

<P><STRONG><a name="[1e0]"></a>tos_event_destroy</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tos_event.o(i.tos_event_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_event_destroy &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_verify
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_deinit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_post_keep
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_timed
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_any
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_all
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_destroy
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_create
</UL>

<P><STRONG><a name="[1c6]"></a>tos_event_pend</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, tos_event.o(i.tos_event_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = tos_event_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state2errno
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_verify
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_is_match
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_event_post_keep_task_entry
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_event_pend_timed_task_entry
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_event_pend_any_task_entry
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_event_pend_all_task_entry
</UL>

<P><STRONG><a name="[1e2]"></a>tos_event_post</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tos_event.o(i.tos_event_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tos_event_post &rArr; event_do_post &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_do_post
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_post_keep
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_timed
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_any
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_all
</UL>

<P><STRONG><a name="[1e5]"></a>tos_event_post_keep</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tos_event.o(i.tos_event_post_keep))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tos_event_post_keep &rArr; event_do_post &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_do_post
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_post_keep
</UL>

<P><STRONG><a name="[132]"></a>tos_knl_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tos_knl_init &rArr; mmheap_init_with_pool &rArr; tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[c8]"></a>tos_knl_irq_enter</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, tos_sys.o(i.tos_knl_irq_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tos_knl_irq_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ca]"></a>tos_knl_irq_leave</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_irq_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tos_knl_irq_leave &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_context_switch
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c7]"></a>tos_knl_is_running</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_sys.o(i.tos_knl_is_running))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_enter
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
</UL>

<P><STRONG><a name="[158]"></a>tos_knl_sched_lock</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_sched_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tos_knl_sched_lock &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_enqueue
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_q_prio_mgr_slot_enqueue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_q_prio_mgr_slot_dequeue
</UL>

<P><STRONG><a name="[226]"></a>tos_knl_sched_unlock</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_sched_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_knl_sched_unlock &rArr; knl_sched &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[134]"></a>tos_knl_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_knl_start
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sched_start
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[1ee]"></a>tos_mail_q_create</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tos_mail_queue.o(i.tos_mail_q_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tos_mail_q_create &rArr; tos_ring_q_create
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_post_all
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_pend_timed
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_pend
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_flush
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_create
</UL>

<P><STRONG><a name="[1ef]"></a>tos_mail_q_destroy</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, tos_mail_queue.o(i.tos_mail_q_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_mail_q_destroy &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_verify
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_deinit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_post_all
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_pend_timed
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_pend
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_flush
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_destroy
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_create
</UL>

<P><STRONG><a name="[1f1]"></a>tos_mail_q_flush</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tos_mail_queue.o(i.tos_mail_q_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tos_mail_q_flush &rArr; tos_ring_q_flush &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_verify
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_flush
</UL>

<P><STRONG><a name="[1ca]"></a>tos_mail_q_pend</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, tos_mail_queue.o(i.tos_mail_q_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = tos_mail_q_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state2errno
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_verify
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mail_queue_pend_timed_task_entry
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mail_queue_pend_task_entry
</UL>

<P><STRONG><a name="[1f0]"></a>tos_mail_q_post</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tos_mail_queue.o(i.tos_mail_q_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tos_mail_q_post &rArr; mail_q_do_post &rArr; mail_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mail_q_do_post
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_post_all
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_pend_timed
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_pend
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_flush
</UL>

<P><STRONG><a name="[1f3]"></a>tos_mail_q_post_all</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tos_mail_queue.o(i.tos_mail_q_post_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tos_mail_q_post_all &rArr; mail_q_do_post &rArr; mail_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mail_q_do_post
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_post_all
</UL>

<P><STRONG><a name="[1fb]"></a>tos_mmblk_alloc</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tos_mmblk.o(i.tos_mmblk_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_mmblk_alloc &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mmblk_free
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mmblk_alloc
</UL>

<P><STRONG><a name="[1fd]"></a>tos_mmblk_free</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tos_mmblk.o(i.tos_mmblk_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_mmblk_free &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mmblk_free
</UL>

<P><STRONG><a name="[1fa]"></a>tos_mmblk_pool_create</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, tos_mmblk.o(i.tos_mmblk_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tos_mmblk_pool_create
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mmblk_pool_create
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mmblk_free
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mmblk_alloc
</UL>

<P><STRONG><a name="[1fc]"></a>tos_mmblk_pool_destroy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tos_mmblk.o(i.tos_mmblk_pool_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tos_mmblk_pool_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mmblk_pool_destroy
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mmblk_pool_create
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mmblk_free
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mmblk_alloc
</UL>

<P><STRONG><a name="[230]"></a>tos_mmheap_alloc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tos_mmheap.o(i.tos_mmheap_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_create
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_create
</UL>

<P><STRONG><a name="[1c1]"></a>tos_mmheap_free</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tos_mmheap.o(i.tos_mmheap_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_destroy
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_create
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_destroy
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_create
</UL>

<P><STRONG><a name="[12b]"></a>tos_mmheap_pool_add</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, tos_mmheap.o(i.tos_mmheap_pool_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_block
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_pool_is_exist
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_used
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_size
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_used
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_free
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
</UL>

<P><STRONG><a name="[1f4]"></a>tos_msg_q_create</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, tos_message_queue.o(i.tos_msg_q_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tos_msg_q_create &rArr; tos_ring_q_create
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_post_all
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_pend_timed
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_pend
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_flush
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_create
</UL>

<P><STRONG><a name="[1f5]"></a>tos_msg_q_destroy</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, tos_message_queue.o(i.tos_msg_q_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_msg_q_destroy &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_verify
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_deinit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_post_all
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_pend_timed
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_pend
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_flush
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_destroy
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_create
</UL>

<P><STRONG><a name="[1f7]"></a>tos_msg_q_flush</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tos_message_queue.o(i.tos_msg_q_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = tos_msg_q_flush &rArr; tos_ring_q_flush &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_verify
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_flush
</UL>

<P><STRONG><a name="[1cc]"></a>tos_msg_q_pend</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, tos_message_queue.o(i.tos_msg_q_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = tos_msg_q_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state2errno
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_verify
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_message_queue_pend_timed_task_entry
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_message_queue_pend_task_entry
</UL>

<P><STRONG><a name="[1f6]"></a>tos_msg_q_post</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tos_message_queue.o(i.tos_msg_q_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_do_post
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_post_all
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_pend_timed
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_pend
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_flush
</UL>

<P><STRONG><a name="[1f9]"></a>tos_msg_q_post_all</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tos_message_queue.o(i.tos_msg_q_post_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tos_msg_q_post_all &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_do_post
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_post_all
</UL>

<P><STRONG><a name="[1d2]"></a>tos_mutex_create</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, tos_mutex.o(i.tos_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tos_mutex_create &rArr; pend_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_post
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_pend_timed
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_pend
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_create
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_owner_die
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_destroy
</UL>

<P><STRONG><a name="[1d3]"></a>tos_mutex_destroy</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tos_mutex.o(i.tos_mutex_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_mutex_destroy &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_verify
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_deinit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_post
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_pend_timed
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_pend
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_destroy
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_create
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_destroy
</UL>

<P><STRONG><a name="[1ce]"></a>tos_mutex_pend</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tos_mutex.o(i.tos_mutex_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_post
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_pend_timed
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_pend
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_task_entry
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_owner_die
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_destroy_entry
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_destroy
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_holder_entry
</UL>

<P><STRONG><a name="[1d7]"></a>tos_mutex_pend_timed</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, tos_mutex.o(i.tos_mutex_pend_timed))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_fresh_owner_mark
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state2errno
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_verify
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_timed_task_entry
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
</UL>

<P><STRONG><a name="[1d6]"></a>tos_mutex_post</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, tos_mutex.o(i.tos_mutex_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = tos_mutex_post &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_fresh_owner_mark
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_one
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_verify
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_task_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_post
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_pend
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_task_entry
</UL>

<P><STRONG><a name="[1fe]"></a>tos_prio_mail_q_create</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, tos_priority_mail_queue.o(i.tos_prio_mail_q_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tos_prio_mail_q_create &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_post_all
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_pend_timed
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_pend
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_flush
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_create
</UL>

<P><STRONG><a name="[1ff]"></a>tos_prio_mail_q_destroy</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tos_priority_mail_queue.o(i.tos_prio_mail_q_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tos_prio_mail_q_destroy &rArr; tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_verify
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_deinit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_post_all
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_pend_timed
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_pend
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_flush
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_destroy
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_create
</UL>

<P><STRONG><a name="[201]"></a>tos_prio_mail_q_flush</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tos_priority_mail_queue.o(i.tos_prio_mail_q_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = tos_prio_mail_q_flush &rArr; tos_prio_q_flush &rArr; prio_q_prio_mgr_reset &rArr; tos_bin_heap_flush &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_verify
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_flush
</UL>

<P><STRONG><a name="[1d8]"></a>tos_prio_mail_q_pend</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, tos_priority_mail_queue.o(i.tos_prio_mail_q_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tos_prio_mail_q_pend &rArr; tos_prio_q_dequeue &rArr; prio_q_prio_mgr_slot_dequeue &rArr; tos_bin_heap_pop &rArr; bin_heap_percolate_down &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state2errno
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_verify
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_prio_mail_queue_pend_timed_task_entry
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_prio_mail_queue_pend_task_entry
</UL>

<P><STRONG><a name="[200]"></a>tos_prio_mail_q_post</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, tos_priority_mail_queue.o(i.tos_prio_mail_q_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tos_prio_mail_q_post &rArr; prio_mail_q_do_post &rArr; tos_prio_q_enqueue &rArr; prio_q_do_enqueue &rArr; prio_q_prio_mgr_slot_enqueue &rArr; tos_bin_heap_push &rArr; bin_heap_percolate_up &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_mail_q_do_post
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_post_all
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_pend_timed
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_pend
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_flush
</UL>

<P><STRONG><a name="[202]"></a>tos_prio_mail_q_post_all</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, tos_priority_mail_queue.o(i.tos_prio_mail_q_post_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tos_prio_mail_q_post_all &rArr; prio_mail_q_do_post &rArr; tos_prio_q_enqueue &rArr; prio_q_do_enqueue &rArr; prio_q_prio_mgr_slot_enqueue &rArr; tos_bin_heap_push &rArr; bin_heap_percolate_up &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_mail_q_do_post
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_post_all
</UL>

<P><STRONG><a name="[203]"></a>tos_prio_msg_q_create</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, tos_priority_message_queue.o(i.tos_prio_msg_q_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tos_prio_msg_q_create &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_post_all
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_pend_timed
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_pend
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_flush
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_create
</UL>

<P><STRONG><a name="[204]"></a>tos_prio_msg_q_destroy</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tos_priority_message_queue.o(i.tos_prio_msg_q_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tos_prio_msg_q_destroy &rArr; tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_verify
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_deinit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_post_all
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_pend_timed
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_pend
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_flush
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_destroy
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_create
</UL>

<P><STRONG><a name="[206]"></a>tos_prio_msg_q_flush</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tos_priority_message_queue.o(i.tos_prio_msg_q_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = tos_prio_msg_q_flush &rArr; tos_prio_q_flush &rArr; prio_q_prio_mgr_reset &rArr; tos_bin_heap_flush &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_verify
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_flush
</UL>

<P><STRONG><a name="[1d9]"></a>tos_prio_msg_q_pend</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, tos_priority_message_queue.o(i.tos_prio_msg_q_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tos_prio_msg_q_pend &rArr; tos_prio_q_dequeue &rArr; prio_q_prio_mgr_slot_dequeue &rArr; tos_bin_heap_pop &rArr; bin_heap_percolate_down &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state2errno
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_verify
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_priority_message_queue_pend_timed_task_entry
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_priority_message_queue_pend_task_entry
</UL>

<P><STRONG><a name="[205]"></a>tos_prio_msg_q_post</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tos_priority_message_queue.o(i.tos_prio_msg_q_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tos_prio_msg_q_post &rArr; prio_msg_q_do_post &rArr; tos_prio_q_enqueue &rArr; prio_q_do_enqueue &rArr; prio_q_prio_mgr_slot_enqueue &rArr; tos_bin_heap_push &rArr; bin_heap_percolate_up &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_msg_q_do_post
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_post_all
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_pend_timed
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_pend
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_flush
</UL>

<P><STRONG><a name="[207]"></a>tos_prio_msg_q_post_all</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tos_priority_message_queue.o(i.tos_prio_msg_q_post_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tos_prio_msg_q_post_all &rArr; prio_msg_q_do_post &rArr; tos_prio_q_enqueue &rArr; prio_q_do_enqueue &rArr; prio_q_prio_mgr_slot_enqueue &rArr; tos_bin_heap_push &rArr; bin_heap_percolate_up &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_msg_q_do_post
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_post_all
</UL>

<P><STRONG><a name="[208]"></a>tos_prio_q_create</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tos_priority_queue.o(i.tos_prio_q_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tos_prio_q_create &rArr; prio_q_prio_mgr_init &rArr; tos_bin_heap_create
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_q_prio_mgr_init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_q_pool_mgr_init
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_int_enqueue
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_flush
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_enqueue_limit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_enqueue
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_create
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_create
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_create
</UL>

<P><STRONG><a name="[20b]"></a>tos_prio_q_dequeue</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, tos_priority_queue.o(i.tos_prio_q_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tos_prio_q_dequeue &rArr; prio_q_prio_mgr_slot_dequeue &rArr; tos_bin_heap_pop &rArr; bin_heap_percolate_down &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_is_empty
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_q_prio_mgr_slot_dequeue
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_q_do_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_int_enqueue
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_flush
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_enqueue_limit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_enqueue
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_pend
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_pend
</UL>

<P><STRONG><a name="[209]"></a>tos_prio_q_destroy</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, tos_priority_queue.o(i.tos_prio_q_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tos_prio_q_destroy &rArr; prio_q_prio_mgr_deinit &rArr; tos_bin_heap_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_deinit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_q_prio_mgr_deinit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_q_pool_mgr_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_int_enqueue
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_flush
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_enqueue_limit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_enqueue
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_destroy
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_create
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_destroy
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_destroy
</UL>

<P><STRONG><a name="[148]"></a>tos_prio_q_enqueue</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tos_priority_queue.o(i.tos_prio_q_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tos_prio_q_enqueue &rArr; prio_q_do_enqueue &rArr; prio_q_prio_mgr_slot_enqueue &rArr; tos_bin_heap_push &rArr; bin_heap_percolate_up &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_int_disable
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_is_full
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_q_pool_mgr_slot_alloc
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_q_do_enqueue
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_int_enqueue
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_flush
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_enqueue_limit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_enqueue
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_msg_q_do_post
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_mail_q_do_post
</UL>

<P><STRONG><a name="[20d]"></a>tos_prio_q_flush</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tos_priority_queue.o(i.tos_prio_q_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tos_prio_q_flush &rArr; prio_q_prio_mgr_reset &rArr; tos_bin_heap_flush &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_q_prio_mgr_reset
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_q_pool_mgr_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_flush
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_flush
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_flush
</UL>

<P><STRONG><a name="[20c]"></a>tos_prio_q_is_empty</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tos_priority_queue.o(i.tos_prio_q_is_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_prio_q_is_empty &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_int_enqueue
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_flush
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_enqueue_limit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_enqueue
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_dequeue
</UL>

<P><STRONG><a name="[20a]"></a>tos_prio_q_is_full</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tos_priority_queue.o(i.tos_prio_q_is_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_prio_q_is_full &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_int_enqueue
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_flush
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_enqueue_limit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_queue_enqueue
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_enqueue
</UL>

<P><STRONG><a name="[20e]"></a>tos_ring_q_create</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tos_ring_queue.o(i.tos_ring_q_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tos_ring_q_create
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_u8_enqueue_limit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_u8_enqueue
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_struct_enqueue_limit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_struct_enqueue
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_flush
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_create
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_create
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_create
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_create
</UL>

<P><STRONG><a name="[213]"></a>tos_ring_q_dequeue</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, tos_ring_queue.o(i.tos_ring_q_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = tos_ring_q_dequeue &rArr; tos_ring_q_is_empty &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_u8_enqueue_limit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_u8_enqueue
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_struct_enqueue_limit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_struct_enqueue
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_flush
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_pend
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop_stream
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop
</UL>

<P><STRONG><a name="[20f]"></a>tos_ring_q_destroy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tos_ring_queue.o(i.tos_ring_q_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tos_ring_q_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_u8_enqueue_limit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_u8_enqueue
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_struct_enqueue_limit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_struct_enqueue
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_flush
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_destroy
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_create
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_destroy
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_destroy
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_destroy
</UL>

<P><STRONG><a name="[123]"></a>tos_ring_q_enqueue</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, tos_ring_queue.o(i.tos_ring_q_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tos_ring_q_enqueue &rArr; tos_ring_q_is_full &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_full
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_u8_enqueue_limit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_u8_enqueue
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_struct_enqueue_limit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_struct_enqueue
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_flush
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_do_post
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mail_q_do_post
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push_stream
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push
</UL>

<P><STRONG><a name="[211]"></a>tos_ring_q_flush</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tos_ring_queue.o(i.tos_ring_q_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_ring_q_flush &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_flush
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_flush
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_flush
</UL>

<P><STRONG><a name="[212]"></a>tos_ring_q_is_empty</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tos_ring_queue.o(i.tos_ring_q_is_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_ring_q_is_empty &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_u8_enqueue_limit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_u8_enqueue
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_struct_enqueue_limit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_struct_enqueue
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_flush
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_is_empty
</UL>

<P><STRONG><a name="[210]"></a>tos_ring_q_is_full</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tos_ring_queue.o(i.tos_ring_q_is_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_ring_q_is_full &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_u8_enqueue_limit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_u8_enqueue
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_struct_enqueue_limit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_struct_enqueue
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_ring_queue_flush
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_is_full
</UL>

<P><STRONG><a name="[214]"></a>tos_sem_create</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tos_sem.o(i.tos_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tos_sem_create &rArr; tos_sem_create_max &rArr; pend_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create_max
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_post_all
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_pend_timed
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_pend
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_create
</UL>

<P><STRONG><a name="[239]"></a>tos_sem_create_max</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tos_sem.o(i.tos_sem_create_max))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tos_sem_create_max &rArr; pend_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create
</UL>

<P><STRONG><a name="[215]"></a>tos_sem_destroy</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tos_sem.o(i.tos_sem_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_sem_destroy &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_verify
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_deinit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_post_all
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_pend_timed
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_pend
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_destroy
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_create
</UL>

<P><STRONG><a name="[1da]"></a>tos_sem_pend</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, tos_sem.o(i.tos_sem_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tos_sem_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state2errno
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_verify
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sem_pend_timed_task_entry
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sem_pend_task_entry
</UL>

<P><STRONG><a name="[216]"></a>tos_sem_post</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tos_sem.o(i.tos_sem_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tos_sem_post &rArr; sem_do_post &rArr; pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_post_all
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_pend_timed
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_pend
</UL>

<P><STRONG><a name="[217]"></a>tos_sem_post_all</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tos_sem.o(i.tos_sem_post_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tos_sem_post_all &rArr; sem_do_post &rArr; pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_post_all
</UL>

<P><STRONG><a name="[1e4]"></a>tos_systick_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tos_time.o(i.tos_systick_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_yeild
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_delay
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_pend_timed
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_pend_timed
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_pend_timed
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_pend_timed
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_pend_timed
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_pend_timed
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_timed
</UL>

<P><STRONG><a name="[11c]"></a>tos_task_create</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, tos_task.o(i.tos_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_stk_init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_yeild
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_suspend_resume
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_prio_change
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_destroy
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_delay_abort
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_create
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_post_all
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_pend_timed
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_pend
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_pend_timed
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_pend
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_owner_die
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_destroy
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_post_all
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_pend_timed
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_pend
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_flush
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_post_all
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_pend_timed
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_pend
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_flush
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_post_all
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_pend_timed
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_pend
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_flush
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_post_all
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_pend_timed
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_pend
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_flush
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_post_keep
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_timed
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_any
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_all
</UL>

<P><STRONG><a name="[1c9]"></a>tos_task_delay</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tos_task.o(i.tos_task_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_task_delay &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_timer_stop
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_timer_periodic_functional
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_timer_oneshot_functional
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_suspend_resume
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_delay_abort
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_delay
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_entry
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sem_pend_timed_task_entry
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sem_pend_task_entry
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_destroy_entry
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_killer_entry
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_holder_entry
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_flush
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_priority_message_queue_pend_timed_task_entry
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_priority_message_queue_pend_task_entry
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_flush
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_prio_mail_queue_pend_timed_task_entry
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_prio_mail_queue_pend_task_entry
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_flush
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_message_queue_pend_timed_task_entry
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_message_queue_pend_task_entry
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_flush
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mail_queue_pend_timed_task_entry
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mail_queue_pend_task_entry
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_post_keep
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_event_post_keep_task_entry
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_event_pend_timed_task_entry
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_event_pend_any_task_entry
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_event_pend_all_task_entry
</UL>

<P><STRONG><a name="[218]"></a>tos_task_delay_abort</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, tos_task.o(i.tos_task_delay_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = tos_task_delay_abort &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_delay_abort
</UL>

<P><STRONG><a name="[1bf]"></a>tos_task_destroy</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tos_task.o(i.tos_task_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_yeild
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_suspend_resume
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_prio_change
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_destroy
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_delay_abort
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_create
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_post_all
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_pend_timed
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_pend
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_pend_timed
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_pend
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_owner_die
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_destroy
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_killer_entry
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_post_all
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_pend_timed
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_pend
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_flush
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_post_all
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_pend_timed
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_pend
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_flush
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_post_all
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_pend_timed
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_pend
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_flush
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_post_all
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_pend_timed
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_pend
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_flush
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_exit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_post_keep
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_timed
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_any
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_all
</UL>

<P><STRONG><a name="[12f]"></a>tos_task_prio_change</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, tos_task.o(i.tos_task_prio_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_highest_pending_prio_get
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_prio_change
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>

<P><STRONG><a name="[21a]"></a>tos_task_resume</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, tos_task.o(i.tos_task_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = tos_task_resume &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_suspend_resume
</UL>

<P><STRONG><a name="[219]"></a>tos_task_suspend</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, tos_task.o(i.tos_task_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = tos_task_suspend &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_suspend_resume
</UL>

<P><STRONG><a name="[1d5]"></a>tos_task_yield</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tos_task.o(i.tos_task_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tos_task_yield &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_task_yeild
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_sem_pend_timed
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_pend_timed
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mutex_pend
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_task_entry
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex_pend_destroy_entry
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_pend_timed
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_priority_message_queue_pend
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_priority_message_queue_pend_task_entry
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_pend_timed
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_prio_mail_queue_pend
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_prio_mail_queue_pend_task_entry
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_message_queue_pend_timed
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_mail_queue_pend_timed
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_event_pend_timed
</UL>

<P><STRONG><a name="[c9]"></a>tos_tick_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tos_tick.o(i.tos_tick_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_tick_handler &rArr; tick_update &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[21b]"></a>tos_timer_create</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, tos_timer.o(i.tos_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tos_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_timer_stop
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_timer_periodic_functional
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_timer_oneshot_functional
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_timer_create
</UL>

<P><STRONG><a name="[21c]"></a>tos_timer_destroy</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, tos_timer.o(i.tos_timer_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tos_timer_destroy &rArr; timer_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_deinit
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_timer_stop
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_timer_periodic_functional
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_timer_oneshot_functional
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_timer_destroy
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_timer_create
</UL>

<P><STRONG><a name="[21d]"></a>tos_timer_start</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, tos_timer.o(i.tos_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tos_timer_start &rArr; timer_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_timer_stop
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_timer_periodic_functional
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_timer_oneshot_functional
</UL>

<P><STRONG><a name="[21e]"></a>tos_timer_stop</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, tos_timer.o(i.tos_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tos_timer_stop &rArr; timer_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_timer_stop
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tos_timer_oneshot_functional
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4f]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[a8]"></a>UART_EndRxTransfer</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[ac]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[9f]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[9c]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[9d]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[8a]"></a>DHT11_Mode_Out_PP</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, dht11_bus.o(i.DHT11_Mode_Out_PP))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DHT11_Mode_Out_PP &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Init
</UL>

<P><STRONG><a name="[d4]"></a>__ffs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tos_mmheap.o(i.__ffs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __ffs &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_fls
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_search_suitable
</UL>

<P><STRONG><a name="[d6]"></a>__fls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tos_mmheap.o(i.__fls))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_fls
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_search
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
</UL>

<P><STRONG><a name="[231]"></a>adjust_request_size</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tos_mmheap.o(i.adjust_request_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adjust_request_size
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
</UL>

<P><STRONG><a name="[df]"></a>blk_absorb</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_absorb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blk_absorb &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
</UL>

<P><STRONG><a name="[e2]"></a>blk_can_split</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_can_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = blk_can_split
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
</UL>

<P><STRONG><a name="[e3]"></a>blk_insert</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, tos_mmheap.o(i.blk_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_free_block
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
</UL>

<P><STRONG><a name="[e1]"></a>blk_link_next</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_link_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
</UL>

<P><STRONG><a name="[e7]"></a>blk_locate_free</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tos_mmheap.o(i.blk_locate_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = blk_locate_free &rArr; mapping_search &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_search
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_search_suitable
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
</UL>

<P><STRONG><a name="[eb]"></a>blk_mark_as_free</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_mark_as_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_free
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
</UL>

<P><STRONG><a name="[ee]"></a>blk_mark_as_used</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_mark_as_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blk_mark_as_used &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_used
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_used
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
</UL>

<P><STRONG><a name="[f1]"></a>blk_merge_next</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_merge_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = blk_merge_next &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>

<P><STRONG><a name="[f3]"></a>blk_merge_prev</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_merge_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>

<P><STRONG><a name="[e6]"></a>blk_next</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, tos_mmheap.o(i.blk_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_block
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_to_ptr
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>

<P><STRONG><a name="[f6]"></a>blk_prepare_used</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_prepare_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_to_ptr
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
</UL>

<P><STRONG><a name="[f2]"></a>blk_remove</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, tos_mmheap.o(i.blk_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
</UL>

<P><STRONG><a name="[e9]"></a>blk_search_suitable</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, tos_mmheap.o(i.blk_search_suitable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = blk_search_suitable &rArr; __ffs &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
</UL>

<P><STRONG><a name="[ed]"></a>blk_set_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_free))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
</UL>

<P><STRONG><a name="[ec]"></a>blk_set_prev_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_prev_free))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
</UL>

<P><STRONG><a name="[ef]"></a>blk_set_prev_used</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_prev_used))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
</UL>

<P><STRONG><a name="[f9]"></a>blk_set_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_size))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
</UL>

<P><STRONG><a name="[f0]"></a>blk_set_used</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_used))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
</UL>

<P><STRONG><a name="[e0]"></a>blk_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_size))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_can_split
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
</UL>

<P><STRONG><a name="[f8]"></a>blk_split</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tos_mmheap.o(i.blk_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_block
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_to_ptr
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_size
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
</UL>

<P><STRONG><a name="[f4]"></a>blk_to_ptr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_to_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>

<P><STRONG><a name="[f7]"></a>blk_trim_free</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_trim_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_can_split
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
</UL>

<P><STRONG><a name="[d5]"></a>generic_fls</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tos_mmheap.o(i.generic_fls))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ffs
</UL>

<P><STRONG><a name="[e5]"></a>insert_free_block</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, tos_mmheap.o(i.insert_free_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = insert_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>

<P><STRONG><a name="[e4]"></a>mapping_insert</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tos_mmheap.o(i.mapping_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_search
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>

<P><STRONG><a name="[e8]"></a>mapping_search</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tos_mmheap.o(i.mapping_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = mapping_search &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
</UL>

<P><STRONG><a name="[12a]"></a>mmheap_ctl_init</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, tos_mmheap.o(i.mmheap_ctl_init))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
</UL>

<P><STRONG><a name="[232]"></a>mmheap_pool_is_exist</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tos_mmheap.o(i.mmheap_pool_is_exist))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[f5]"></a>offset_to_block</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_mmheap.o(i.offset_to_block))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>

<P><STRONG><a name="[ea]"></a>remove_free_block</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tos_mmheap.o(i.remove_free_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = remove_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
</UL>

<P><STRONG><a name="[233]"></a>mutex_fresh_owner_mark</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tos_mutex.o(i.mutex_fresh_owner_mark))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mutex_fresh_owner_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>

<P><STRONG><a name="[12e]"></a>mutex_old_owner_release</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tos_mutex.o(i.mutex_old_owner_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>

<P><STRONG><a name="[15f]"></a>_list_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_sched.o(i._list_add))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
</UL>

<P><STRONG><a name="[162]"></a>_list_del</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sched.o(i._list_del))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[161]"></a>readyqueue_prio_highest_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tos_sched.o(i.readyqueue_prio_highest_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[15e]"></a>readyqueue_prio_mark</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_prio_mark))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>

<P><STRONG><a name="[160]"></a>tos_list_add_tail</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tos_sched.o(i.tos_list_add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
</UL>

<P><STRONG><a name="[15d]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_sched.o(i.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>

<P><STRONG><a name="[163]"></a>sem_do_post</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tos_sem.o(i.sem_do_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = sem_do_post &rArr; pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_verify
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post_all
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post
</UL>

<P><STRONG><a name="[5f]"></a>knl_idle_entry</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_sys.o(i.knl_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = knl_idle_entry &rArr; task_free_all &rArr; task_free &rArr; tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_sys.o(i.knl_idle_init)
</UL>
<P><STRONG><a name="[1b8]"></a>task_do_destroy</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tos_task.o(i.task_do_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_release
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>

<P><STRONG><a name="[7e]"></a>task_exit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tos_task.o(i.task_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = task_exit &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_task.o(i.tos_task_create)
</UL>
<P><STRONG><a name="[1c0]"></a>task_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tos_task.o(i.task_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = task_free &rArr; tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
</UL>

<P><STRONG><a name="[1c2]"></a>task_highest_pending_prio_get</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, tos_task.o(i.task_highest_pending_prio_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[1bb]"></a>task_mutex_release</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tos_task.o(i.task_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[1be]"></a>task_reset</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tos_task.o(i.task_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = task_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_deinit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[1bc]"></a>task_state_is_ready</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_task.o(i.task_state_is_ready))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[23a]"></a>tos_list_add</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_task.o(i.tos_list_add))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[1bd]"></a>tos_list_del</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_task.o(i.tos_list_del))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
</UL>

<P><STRONG><a name="[1ba]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_task.o(i.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[1c4]"></a>tos_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_task.o(i.tos_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
</UL>

<P><STRONG><a name="[21f]"></a>tick_task_place</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, tos_tick.o(i.tick_task_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
</UL>

<P><STRONG><a name="[220]"></a>tick_task_takeoff</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tos_tick.o(i.tick_task_takeoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tick_task_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
</UL>

<P><STRONG><a name="[221]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_tick.o(i.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
</UL>

<P><STRONG><a name="[223]"></a>timer_place</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, tos_timer.o(i.timer_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = timer_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_start
</UL>

<P><STRONG><a name="[224]"></a>timer_takeoff</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tos_timer.o(i.timer_takeoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = timer_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_stop
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_start
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_destroy
</UL>

<P><STRONG><a name="[23c]"></a>tos_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_timer.o(i.tos_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_destroy
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_create
</UL>

<P><STRONG><a name="[105]"></a>event_do_post</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, tos_event.o(i.event_do_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = event_do_post &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_verify
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_is_match
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_post_keep
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_post
</UL>

<P><STRONG><a name="[108]"></a>event_is_match</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tos_event.o(i.event_is_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = event_is_match
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_pend
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_do_post
</UL>

<P><STRONG><a name="[13a]"></a>pend_list_add</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tos_pend.o(i.pend_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pend_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
</UL>

<P><STRONG><a name="[139]"></a>tos_list_del</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_pend.o(i.tos_list_del))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
</UL>

<P><STRONG><a name="[137]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_pend.o(i.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
</UL>

<P><STRONG><a name="[13d]"></a>tos_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_pend.o(i.tos_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_deinit
</UL>

<P><STRONG><a name="[db]"></a>bin_heap_do_percolate_up</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, tos_binary_heap.o(i.bin_heap_do_percolate_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin_heap_percolate_up
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin_heap_percolate_down
</UL>

<P><STRONG><a name="[dd]"></a>bin_heap_percolate_down</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, tos_binary_heap.o(i.bin_heap_percolate_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bin_heap_percolate_down &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin_heap_do_percolate_up
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_pop
</UL>

<P><STRONG><a name="[de]"></a>bin_heap_percolate_up</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tos_binary_heap.o(i.bin_heap_percolate_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bin_heap_percolate_up &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin_heap_do_percolate_up
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_push
</UL>

<P><STRONG><a name="[121]"></a>mail_q_do_post</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, tos_mail_queue.o(i.mail_q_do_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = mail_q_do_post &rArr; mail_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_verify
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mail_task_recv
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_post_all
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_post
</UL>

<P><STRONG><a name="[124]"></a>mail_task_recv</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tos_mail_queue.o(i.mail_task_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = mail_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mail_q_do_post
</UL>

<P><STRONG><a name="[12c]"></a>msg_q_do_post</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, tos_message_queue.o(i.msg_q_do_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_verify
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_task_recv
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_post_all
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_post
</UL>

<P><STRONG><a name="[12d]"></a>msg_q_task_recv</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tos_message_queue.o(i.msg_q_task_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_do_post
</UL>

<P><STRONG><a name="[147]"></a>prio_mail_q_do_post</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, tos_priority_mail_queue.o(i.prio_mail_q_do_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = prio_mail_q_do_post &rArr; tos_prio_q_enqueue &rArr; prio_q_do_enqueue &rArr; prio_q_prio_mgr_slot_enqueue &rArr; tos_bin_heap_push &rArr; bin_heap_percolate_up &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_verify
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_enqueue
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_mail_task_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_post_all
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_post
</UL>

<P><STRONG><a name="[149]"></a>prio_mail_task_recv</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tos_priority_mail_queue.o(i.prio_mail_task_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = prio_mail_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_mail_q_do_post
</UL>

<P><STRONG><a name="[14a]"></a>prio_msg_q_do_post</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, tos_priority_message_queue.o(i.prio_msg_q_do_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = prio_msg_q_do_post &rArr; tos_prio_q_enqueue &rArr; prio_q_do_enqueue &rArr; prio_q_prio_mgr_slot_enqueue &rArr; tos_bin_heap_push &rArr; bin_heap_percolate_up &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_verify
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_msg_q_task_recv
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_post_all
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_post
</UL>

<P><STRONG><a name="[14b]"></a>prio_msg_q_task_recv</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tos_priority_message_queue.o(i.prio_msg_q_task_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = prio_msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_msg_q_do_post
</UL>

<P><STRONG><a name="[14c]"></a>prio_q_do_dequeue</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, tos_priority_queue.o(i.prio_q_do_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prio_q_do_dequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_q_pool_mgr_slot_free
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_dequeue
</UL>

<P><STRONG><a name="[14e]"></a>prio_q_do_enqueue</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tos_priority_queue.o(i.prio_q_do_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = prio_q_do_enqueue &rArr; prio_q_prio_mgr_slot_enqueue &rArr; tos_bin_heap_push &rArr; bin_heap_percolate_up &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_q_prio_mgr_slot_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_enqueue
</UL>

<P><STRONG><a name="[60]"></a>prio_q_mgr_entry_cmp</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, tos_priority_queue.o(i.prio_q_mgr_entry_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prio_q_mgr_entry_cmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_priority_queue.o(i.prio_q_prio_mgr_init)
</UL>
<P><STRONG><a name="[236]"></a>prio_q_pool_mgr_deinit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_priority_queue.o(i.prio_q_pool_mgr_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_destroy
</UL>

<P><STRONG><a name="[235]"></a>prio_q_pool_mgr_init</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, tos_priority_queue.o(i.prio_q_pool_mgr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prio_q_pool_mgr_init
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_create
</UL>

<P><STRONG><a name="[238]"></a>prio_q_pool_mgr_reset</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, tos_priority_queue.o(i.prio_q_pool_mgr_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prio_q_pool_mgr_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_flush
</UL>

<P><STRONG><a name="[237]"></a>prio_q_pool_mgr_slot_alloc</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tos_priority_queue.o(i.prio_q_pool_mgr_slot_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prio_q_pool_mgr_slot_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_enqueue
</UL>

<P><STRONG><a name="[14d]"></a>prio_q_pool_mgr_slot_free</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_priority_queue.o(i.prio_q_pool_mgr_slot_free))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_q_do_dequeue
</UL>

<P><STRONG><a name="[150]"></a>prio_q_prio_mgr_deinit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tos_priority_queue.o(i.prio_q_prio_mgr_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prio_q_prio_mgr_deinit &rArr; tos_bin_heap_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_destroy
</UL>

<P><STRONG><a name="[152]"></a>prio_q_prio_mgr_init</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, tos_priority_queue.o(i.prio_q_prio_mgr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prio_q_prio_mgr_init &rArr; tos_bin_heap_create
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_create
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_create
</UL>

<P><STRONG><a name="[154]"></a>prio_q_prio_mgr_reset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_priority_queue.o(i.prio_q_prio_mgr_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = prio_q_prio_mgr_reset &rArr; tos_bin_heap_flush &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_flush
</UL>

<P><STRONG><a name="[156]"></a>prio_q_prio_mgr_slot_dequeue</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tos_priority_queue.o(i.prio_q_prio_mgr_slot_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = prio_q_prio_mgr_slot_dequeue &rArr; tos_bin_heap_pop &rArr; bin_heap_percolate_down &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_pop
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_int_disable
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_dequeue
</UL>

<P><STRONG><a name="[14f]"></a>prio_q_prio_mgr_slot_enqueue</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, tos_priority_queue.o(i.prio_q_prio_mgr_slot_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = prio_q_prio_mgr_slot_enqueue &rArr; tos_bin_heap_push &rArr; bin_heap_percolate_up &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_push
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_int_disable
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prio_q_do_enqueue
</UL>

<P><STRONG><a name="[146]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port_c.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_priority_set
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_config
</UL>

<P><STRONG><a name="[133]"></a>errno_knl2cmsis</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.errno_knl2cmsis))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[135]"></a>priority_cmsis2knl</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cmsis_os.o(i.priority_cmsis2knl))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[6a]"></a>test_event_pend_all_task_entry</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, suit_event.o(i.test_event_pend_all_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = test_event_pend_all_task_entry &rArr; tos_event_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_event_set
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_set
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_set
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_pend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> suit_event.o(i.test_tos_event_pend_all)
</UL>
<P><STRONG><a name="[6b]"></a>test_event_pend_any_task_entry</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, suit_event.o(i.test_event_pend_any_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = test_event_pend_any_task_entry &rArr; tos_event_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_event_set
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_set
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_set
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_pend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> suit_event.o(i.test_tos_event_pend_any)
</UL>
<P><STRONG><a name="[6c]"></a>test_event_pend_timed_task_entry</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, suit_event.o(i.test_event_pend_timed_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = test_event_pend_timed_task_entry &rArr; tos_event_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_event_set
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_set
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_set
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_pend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> suit_event.o(i.test_tos_event_pend_timed)
</UL>
<P><STRONG><a name="[6d]"></a>test_event_post_keep_task_entry</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, suit_event.o(i.test_event_post_keep_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = test_event_post_keep_task_entry &rArr; tos_event_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_event_set
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_set
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_set
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_pend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> suit_event.o(i.test_tos_event_post_keep)
</UL>
<P><STRONG><a name="[171]"></a>test_tos_event_create</STRONG> (Thumb, 370 bytes, Stack size 8 bytes, suit_event.o(i.test_tos_event_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = test_tos_event_create &rArr; tos_event_destroy &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_destroy
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_create
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_event
</UL>

<P><STRONG><a name="[172]"></a>test_tos_event_destroy</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, suit_event.o(i.test_tos_event_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = test_tos_event_destroy &rArr; tos_event_destroy &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_event
</UL>

<P><STRONG><a name="[173]"></a>test_tos_event_pend_all</STRONG> (Thumb, 1462 bytes, Stack size 24 bytes, suit_event.o(i.test_tos_event_pend_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = test_tos_event_pend_all &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_reset
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_event_reset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_reset
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_post
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_destroy
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_create
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_event
</UL>

<P><STRONG><a name="[174]"></a>test_tos_event_pend_any</STRONG> (Thumb, 1748 bytes, Stack size 24 bytes, suit_event.o(i.test_tos_event_pend_any))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = test_tos_event_pend_any &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_reset
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_event_reset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_reset
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_post
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_destroy
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_create
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_event
</UL>

<P><STRONG><a name="[175]"></a>test_tos_event_pend_timed</STRONG> (Thumb, 1348 bytes, Stack size 32 bytes, suit_event.o(i.test_tos_event_pend_timed))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = test_tos_event_pend_timed &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_reset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_reset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_reset
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_post
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_destroy
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_create
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_event
</UL>

<P><STRONG><a name="[176]"></a>test_tos_event_post_keep</STRONG> (Thumb, 1600 bytes, Stack size 24 bytes, suit_event.o(i.test_tos_event_post_keep))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = test_tos_event_post_keep &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_reset
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_event_reset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_reset
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_post_keep
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_post
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_destroy
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_create
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_event
</UL>

<P><STRONG><a name="[185]"></a>test_tos_mmblk_alloc</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, suit_mmblk.o(i.test_tos_mmblk_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = test_tos_mmblk_alloc &rArr; tos_mmblk_pool_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmblk_pool_destroy
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmblk_pool_create
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmblk_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_mmblk
</UL>

<P><STRONG><a name="[186]"></a>test_tos_mmblk_free</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, suit_mmblk.o(i.test_tos_mmblk_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = test_tos_mmblk_free &rArr; tos_mmblk_pool_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmblk_pool_destroy
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmblk_pool_create
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmblk_free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmblk_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_mmblk
</UL>

<P><STRONG><a name="[183]"></a>test_tos_mmblk_pool_create</STRONG> (Thumb, 592 bytes, Stack size 8 bytes, suit_mmblk.o(i.test_tos_mmblk_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = test_tos_mmblk_pool_create &rArr; tos_mmblk_pool_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmblk_pool_destroy
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmblk_pool_create
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_mmblk
</UL>

<P><STRONG><a name="[184]"></a>test_tos_mmblk_pool_destroy</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, suit_mmblk.o(i.test_tos_mmblk_pool_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = test_tos_mmblk_pool_destroy &rArr; tos_mmblk_pool_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmblk_pool_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_mmblk
</UL>

<P><STRONG><a name="[63]"></a>test_mutex_holder_entry</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, suit_mutex.o(i.test_mutex_holder_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = test_mutex_holder_entry &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> suit_mutex.o(i.test_mutex_pend_owner_die)
</UL>
<P><STRONG><a name="[64]"></a>test_mutex_killer_entry</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, suit_mutex.o(i.test_mutex_killer_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = test_mutex_killer_entry &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> suit_mutex.o(i.test_mutex_pend_owner_die)
</UL>
<P><STRONG><a name="[18c]"></a>test_mutex_pend_destroy</STRONG> (Thumb, 502 bytes, Stack size 32 bytes, suit_mutex.o(i.test_mutex_pend_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = test_mutex_pend_destroy &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_reset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_reset
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_mutex
</UL>

<P><STRONG><a name="[62]"></a>test_mutex_pend_destroy_entry</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, suit_mutex.o(i.test_mutex_pend_destroy_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = test_mutex_pend_destroy_entry &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_set
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_set
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> suit_mutex.o(i.test_mutex_pend_destroy)
</UL>
<P><STRONG><a name="[18d]"></a>test_mutex_pend_owner_die</STRONG> (Thumb, 386 bytes, Stack size 24 bytes, suit_mutex.o(i.test_mutex_pend_owner_die))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = test_mutex_pend_owner_die &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_mutex
</UL>

<P><STRONG><a name="[72]"></a>test_mutex_pend_task_entry</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, suit_mutex.o(i.test_mutex_pend_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = test_mutex_pend_task_entry &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_set
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_set
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> suit_mutex.o(i.test_tos_mutex_pend)
</UL>
<P><STRONG><a name="[73]"></a>test_mutex_pend_timed_task_entry</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, suit_mutex.o(i.test_mutex_pend_timed_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = test_mutex_pend_timed_task_entry &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_set
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_set
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> suit_mutex.o(i.test_tos_mutex_pend_timed)
</UL>
<P><STRONG><a name="[187]"></a>test_tos_mutex_create</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, suit_mutex.o(i.test_tos_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = test_tos_mutex_create &rArr; tos_mutex_destroy &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_mutex
</UL>

<P><STRONG><a name="[188]"></a>test_tos_mutex_destroy</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, suit_mutex.o(i.test_tos_mutex_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = test_tos_mutex_destroy &rArr; tos_mutex_destroy &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_mutex
</UL>

<P><STRONG><a name="[189]"></a>test_tos_mutex_pend</STRONG> (Thumb, 1592 bytes, Stack size 24 bytes, suit_mutex.o(i.test_tos_mutex_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = test_tos_mutex_pend &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_reset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_reset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_reset
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_mutex
</UL>

<P><STRONG><a name="[18a]"></a>test_tos_mutex_pend_timed</STRONG> (Thumb, 772 bytes, Stack size 40 bytes, suit_mutex.o(i.test_tos_mutex_pend_timed))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = test_tos_mutex_pend_timed &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_reset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_reset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_reset
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_mutex
</UL>

<P><STRONG><a name="[18b]"></a>test_tos_mutex_post</STRONG> (Thumb, 382 bytes, Stack size 8 bytes, suit_mutex.o(i.test_tos_mutex_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = test_tos_mutex_post &rArr; tos_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_mutex
</UL>

<P><STRONG><a name="[78]"></a>test_sem_pend_task_entry</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, suit_sem.o(i.test_sem_pend_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = test_sem_pend_task_entry &rArr; tos_sem_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_set
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_set
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
</UL>
<BR>[Address Reference Count : 2]<UL><LI> suit_sem.o(i.test_tos_sem_pend)
<LI> suit_sem.o(i.test_tos_sem_post_all)
</UL>
<P><STRONG><a name="[79]"></a>test_sem_pend_timed_task_entry</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, suit_sem.o(i.test_sem_pend_timed_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = test_sem_pend_timed_task_entry &rArr; tos_sem_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_set
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_set
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> suit_sem.o(i.test_tos_sem_pend_timed)
</UL>
<P><STRONG><a name="[1a7]"></a>test_tos_sem_create</STRONG> (Thumb, 370 bytes, Stack size 8 bytes, suit_sem.o(i.test_tos_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = test_tos_sem_create &rArr; tos_sem_destroy &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_sem
</UL>

<P><STRONG><a name="[1a8]"></a>test_tos_sem_destroy</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, suit_sem.o(i.test_tos_sem_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = test_tos_sem_destroy &rArr; tos_sem_destroy &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_sem
</UL>

<P><STRONG><a name="[1a9]"></a>test_tos_sem_pend</STRONG> (Thumb, 644 bytes, Stack size 24 bytes, suit_sem.o(i.test_tos_sem_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = test_tos_sem_pend &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_reset
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_sem
</UL>

<P><STRONG><a name="[1aa]"></a>test_tos_sem_pend_timed</STRONG> (Thumb, 912 bytes, Stack size 32 bytes, suit_sem.o(i.test_tos_sem_pend_timed))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = test_tos_sem_pend_timed &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_reset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_reset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_reset
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_sem
</UL>

<P><STRONG><a name="[1ab]"></a>test_tos_sem_post_all</STRONG> (Thumb, 882 bytes, Stack size 24 bytes, suit_sem.o(i.test_tos_sem_post_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = test_tos_sem_post_all &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_reset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_reset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_reset
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post_all
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_sem
</UL>

<P><STRONG><a name="[7a]"></a>test_task_entry</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, suit_task.o(i.test_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = test_task_entry &rArr; tos_task_delay &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
</UL>
<BR>[Address Reference Count : 6]<UL><LI> suit_task.o(i.test_tos_task_create)
<LI> suit_task.o(i.test_tos_task_delay_abort)
<LI> suit_task.o(i.test_tos_task_destroy)
<LI> suit_task.o(i.test_tos_task_prio_change)
<LI> suit_task.o(i.test_tos_task_suspend_resume)
<LI> suit_task.o(i.test_tos_task_yeild)
</UL>
<P><STRONG><a name="[1ac]"></a>test_tos_task_create</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, suit_task.o(i.test_tos_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = test_tos_task_create &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_task
</UL>

<P><STRONG><a name="[1ae]"></a>test_tos_task_delay</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, suit_task.o(i.test_tos_task_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = test_tos_task_delay &rArr; tos_task_delay &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_task
</UL>

<P><STRONG><a name="[1af]"></a>test_tos_task_delay_abort</STRONG> (Thumb, 422 bytes, Stack size 32 bytes, suit_task.o(i.test_tos_task_delay_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = test_tos_task_delay_abort &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_reset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_task
</UL>

<P><STRONG><a name="[1ad]"></a>test_tos_task_destroy</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, suit_task.o(i.test_tos_task_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = test_tos_task_destroy &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_task
</UL>

<P><STRONG><a name="[1b1]"></a>test_tos_task_prio_change</STRONG> (Thumb, 454 bytes, Stack size 24 bytes, suit_task.o(i.test_tos_task_prio_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = test_tos_task_prio_change &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_task
</UL>

<P><STRONG><a name="[1b0]"></a>test_tos_task_suspend_resume</STRONG> (Thumb, 442 bytes, Stack size 40 bytes, suit_task.o(i.test_tos_task_suspend_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = test_tos_task_suspend_resume &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_reset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_task
</UL>

<P><STRONG><a name="[1b2]"></a>test_tos_task_yeild</STRONG> (Thumb, 346 bytes, Stack size 48 bytes, suit_task.o(i.test_tos_task_yeild))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = test_tos_task_yeild &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_reset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_task
</UL>

<P><STRONG><a name="[7b]"></a>test_timer_call_back_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, suit_timer.o(i.test_timer_call_back_dummy))
<BR>[Address Reference Count : 2]<UL><LI> suit_timer.o(i.test_tos_timer_create)
<LI> suit_timer.o(i.test_tos_timer_stop)
</UL>
<P><STRONG><a name="[7c]"></a>test_timer_oneshot_call_back</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, suit_timer.o(i.test_timer_oneshot_call_back))
<BR>[Address Reference Count : 1]<UL><LI> suit_timer.o(i.test_tos_timer_oneshot_functional)
</UL>
<P><STRONG><a name="[7d]"></a>test_timer_periodic_call_back</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, suit_timer.o(i.test_timer_periodic_call_back))
<BR>[Address Reference Count : 1]<UL><LI> suit_timer.o(i.test_tos_timer_periodic_functional)
</UL>
<P><STRONG><a name="[1b3]"></a>test_tos_timer_create</STRONG> (Thumb, 886 bytes, Stack size 32 bytes, suit_timer.o(i.test_tos_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = test_tos_timer_create &rArr; tos_timer_destroy &rArr; timer_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_destroy
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_timer
</UL>

<P><STRONG><a name="[1b4]"></a>test_tos_timer_destroy</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, suit_timer.o(i.test_tos_timer_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = test_tos_timer_destroy &rArr; tos_timer_destroy &rArr; timer_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_timer
</UL>

<P><STRONG><a name="[1b6]"></a>test_tos_timer_oneshot_functional</STRONG> (Thumb, 508 bytes, Stack size 32 bytes, suit_timer.o(i.test_tos_timer_oneshot_functional))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = test_tos_timer_oneshot_functional &rArr; tos_task_delay &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_stop
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_start
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_destroy
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_timer
</UL>

<P><STRONG><a name="[1b7]"></a>test_tos_timer_periodic_functional</STRONG> (Thumb, 640 bytes, Stack size 32 bytes, suit_timer.o(i.test_tos_timer_periodic_functional))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = test_tos_timer_periodic_functional &rArr; tos_task_delay &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_start
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_destroy
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_timer
</UL>

<P><STRONG><a name="[1b5]"></a>test_tos_timer_stop</STRONG> (Thumb, 938 bytes, Stack size 32 bytes, suit_timer.o(i.test_tos_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = test_tos_timer_stop &rArr; tos_task_delay &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_stop
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_start
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_destroy
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_timer
</UL>

<P><STRONG><a name="[10d]"></a>greatest_buffer_test_name</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, test_main.o(i.greatest_buffer_test_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = greatest_buffer_test_name &rArr; strncat
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_pre
</UL>

<P><STRONG><a name="[110]"></a>greatest_do_fail</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, test_main.o(i.greatest_do_fail))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = greatest_do_fail &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_post
</UL>

<P><STRONG><a name="[111]"></a>greatest_do_pass</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, test_main.o(i.greatest_do_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = greatest_do_pass &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_post
</UL>

<P><STRONG><a name="[112]"></a>greatest_do_skip</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, test_main.o(i.greatest_do_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = greatest_do_skip &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_post
</UL>

<P><STRONG><a name="[113]"></a>greatest_name_match</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, test_main.o(i.greatest_name_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = greatest_name_match &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_suite_pre
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_test_pre
</UL>

<P><STRONG><a name="[d9]"></a>greatest_run_suite</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, test_main.o(i.greatest_run_suite))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = greatest_run_suite &rArr; greatest_suite_pre &rArr; greatest_name_match &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_suite_pre
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_suite_post
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_entry
</UL>

<P><STRONG><a name="[116]"></a>greatest_suite_post</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, test_main.o(i.greatest_suite_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = greatest_suite_post &rArr; report_suite &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_suite
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_run_suite
</UL>

<P><STRONG><a name="[115]"></a>greatest_suite_pre</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, test_main.o(i.greatest_suite_pre))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = greatest_suite_pre &rArr; greatest_name_match &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_counts_and_reset_suite
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_name_match
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_run_suite
</UL>

<P><STRONG><a name="[117]"></a>report_suite</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, test_main.o(i.report_suite))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = report_suite &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_suite_post
</UL>

<P><STRONG><a name="[91]"></a>update_counts_and_reset_suite</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, test_main.o(i.update_counts_and_reset_suite))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GREATEST_PRINT_REPORT
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greatest_suite_pre
</UL>

<P><STRONG><a name="[16c]"></a>test_tos_binary_flush</STRONG> (Thumb, 552 bytes, Stack size 224 bytes, suit_binary_heap.o(i.test_tos_binary_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = test_tos_binary_flush &rArr; tos_bin_heap_pop &rArr; bin_heap_percolate_down &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_push
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_pop
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_is_full
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_is_empty
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_flush
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_destroy
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_binary_heap
</UL>

<P><STRONG><a name="[165]"></a>test_tos_binary_heap_create</STRONG> (Thumb, 414 bytes, Stack size 16 bytes, suit_binary_heap.o(i.test_tos_binary_heap_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = test_tos_binary_heap_create &rArr; tos_bin_heap_create
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_destroy
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_binary_heap
</UL>

<P><STRONG><a name="[166]"></a>test_tos_binary_heap_destroy</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, suit_binary_heap.o(i.test_tos_binary_heap_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = test_tos_binary_heap_destroy &rArr; tos_bin_heap_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_binary_heap
</UL>

<P><STRONG><a name="[16a]"></a>test_tos_binary_heap_max_int_push</STRONG> (Thumb, 564 bytes, Stack size 152 bytes, suit_binary_heap.o(i.test_tos_binary_heap_max_int_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = test_tos_binary_heap_max_int_push &rArr; tos_bin_heap_pop &rArr; bin_heap_percolate_down &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_push
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_pop
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_is_full
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_is_empty
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_destroy
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_binary_heap
</UL>

<P><STRONG><a name="[168]"></a>test_tos_binary_heap_max_push</STRONG> (Thumb, 698 bytes, Stack size 416 bytes, suit_binary_heap.o(i.test_tos_binary_heap_max_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = test_tos_binary_heap_max_push &rArr; tos_bin_heap_pop &rArr; bin_heap_percolate_down &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_push
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_pop
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_is_full
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_is_empty
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_destroy
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_binary_heap
</UL>

<P><STRONG><a name="[169]"></a>test_tos_binary_heap_min_int_push</STRONG> (Thumb, 564 bytes, Stack size 152 bytes, suit_binary_heap.o(i.test_tos_binary_heap_min_int_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = test_tos_binary_heap_min_int_push &rArr; tos_bin_heap_pop &rArr; bin_heap_percolate_down &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_push
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_pop
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_is_full
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_is_empty
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_destroy
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_binary_heap
</UL>

<P><STRONG><a name="[167]"></a>test_tos_binary_heap_min_push</STRONG> (Thumb, 698 bytes, Stack size 416 bytes, suit_binary_heap.o(i.test_tos_binary_heap_min_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = test_tos_binary_heap_min_push &rArr; tos_bin_heap_pop &rArr; bin_heap_percolate_down &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_push
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_pop
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_is_full
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_is_empty
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_destroy
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_binary_heap
</UL>

<P><STRONG><a name="[16b]"></a>test_tos_binary_heap_push_limit</STRONG> (Thumb, 970 bytes, Stack size 416 bytes, suit_binary_heap.o(i.test_tos_binary_heap_push_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = test_tos_binary_heap_push_limit &rArr; tos_bin_heap_pop &rArr; bin_heap_percolate_down &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_push
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_pop
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_is_full
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_is_empty
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_destroy
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_bin_heap_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_binary_heap
</UL>

<P><STRONG><a name="[16f]"></a>test_tos_fifo_char_push</STRONG> (Thumb, 472 bytes, Stack size 16 bytes, suit_char_fifo.o(i.test_tos_fifo_char_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = test_tos_fifo_char_push &rArr; tos_chr_fifo_push &rArr; tos_ring_q_enqueue &rArr; tos_ring_q_is_full &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_destroy
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_create
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_char_fifo
</UL>

<P><STRONG><a name="[16d]"></a>test_tos_fifo_create</STRONG> (Thumb, 374 bytes, Stack size 8 bytes, suit_char_fifo.o(i.test_tos_fifo_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = test_tos_fifo_create &rArr; tos_chr_fifo_create &rArr; tos_ring_q_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_destroy
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_create
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_char_fifo
</UL>

<P><STRONG><a name="[16e]"></a>test_tos_fifo_destory</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, suit_char_fifo.o(i.test_tos_fifo_destory))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = test_tos_fifo_destory &rArr; tos_chr_fifo_destroy &rArr; tos_ring_q_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_char_fifo
</UL>

<P><STRONG><a name="[170]"></a>test_tos_fifo_stream_push</STRONG> (Thumb, 468 bytes, Stack size 32 bytes, suit_char_fifo.o(i.test_tos_fifo_stream_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = test_tos_fifo_stream_push &rArr; tos_chr_fifo_pop_stream &rArr; tos_ring_q_dequeue &rArr; tos_ring_q_is_empty &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push_stream
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop_stream
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_is_full
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_is_empty
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_create
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_char_fifo
</UL>

<P><STRONG><a name="[6e]"></a>test_mail_queue_pend_task_entry</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, suit_mail_queue.o(i.test_mail_queue_pend_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = test_mail_queue_pend_task_entry &rArr; tos_mail_q_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_set
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_set
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mail_set
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_pend
</UL>
<BR>[Address Reference Count : 3]<UL><LI> suit_mail_queue.o(i.test_tos_mail_queue_flush)
<LI> suit_mail_queue.o(i.test_tos_mail_queue_pend)
<LI> suit_mail_queue.o(i.test_tos_mail_queue_post_all)
</UL>
<P><STRONG><a name="[6f]"></a>test_mail_queue_pend_timed_task_entry</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, suit_mail_queue.o(i.test_mail_queue_pend_timed_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = test_mail_queue_pend_timed_task_entry &rArr; tos_mail_q_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_set
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_set
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mail_set
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_pend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> suit_mail_queue.o(i.test_tos_mail_queue_pend_timed)
</UL>
<P><STRONG><a name="[177]"></a>test_tos_mail_queue_create</STRONG> (Thumb, 380 bytes, Stack size 8 bytes, suit_mail_queue.o(i.test_tos_mail_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = test_tos_mail_queue_create &rArr; tos_mail_q_destroy &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_destroy
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_mail_queue
</UL>

<P><STRONG><a name="[178]"></a>test_tos_mail_queue_destroy</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, suit_mail_queue.o(i.test_tos_mail_queue_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = test_tos_mail_queue_destroy &rArr; tos_mail_q_destroy &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_mail_queue
</UL>

<P><STRONG><a name="[17c]"></a>test_tos_mail_queue_flush</STRONG> (Thumb, 1704 bytes, Stack size 64 bytes, suit_mail_queue.o(i.test_tos_mail_queue_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = test_tos_mail_queue_flush &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_reset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_reset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_reset
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_post
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_flush
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_destroy
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_mail_queue
</UL>

<P><STRONG><a name="[179]"></a>test_tos_mail_queue_pend</STRONG> (Thumb, 850 bytes, Stack size 40 bytes, suit_mail_queue.o(i.test_tos_mail_queue_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = test_tos_mail_queue_pend &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_reset
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mail_reset
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_post
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_destroy
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_mail_queue
</UL>

<P><STRONG><a name="[17a]"></a>test_tos_mail_queue_pend_timed</STRONG> (Thumb, 1490 bytes, Stack size 48 bytes, suit_mail_queue.o(i.test_tos_mail_queue_pend_timed))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = test_tos_mail_queue_pend_timed &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_reset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_reset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_reset
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mail_reset
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_post
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_destroy
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_mail_queue
</UL>

<P><STRONG><a name="[17b]"></a>test_tos_mail_queue_post_all</STRONG> (Thumb, 1622 bytes, Stack size 40 bytes, suit_mail_queue.o(i.test_tos_mail_queue_post_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = test_tos_mail_queue_post_all &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_reset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_reset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_reset
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_post_all
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_post
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_destroy
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mail_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_mail_queue
</UL>

<P><STRONG><a name="[70]"></a>test_message_queue_pend_task_entry</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, suit_message_queue.o(i.test_message_queue_pend_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = test_message_queue_pend_task_entry &rArr; tos_msg_q_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_set
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_set
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_msg_set
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
</UL>
<BR>[Address Reference Count : 3]<UL><LI> suit_message_queue.o(i.test_tos_message_queue_flush)
<LI> suit_message_queue.o(i.test_tos_message_queue_pend)
<LI> suit_message_queue.o(i.test_tos_message_queue_post_all)
</UL>
<P><STRONG><a name="[71]"></a>test_message_queue_pend_timed_task_entry</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, suit_message_queue.o(i.test_message_queue_pend_timed_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = test_message_queue_pend_timed_task_entry &rArr; tos_msg_q_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_set
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_set
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_msg_set
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> suit_message_queue.o(i.test_tos_message_queue_pend_timed)
</UL>
<P><STRONG><a name="[17d]"></a>test_tos_message_queue_create</STRONG> (Thumb, 374 bytes, Stack size 8 bytes, suit_message_queue.o(i.test_tos_message_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = test_tos_message_queue_create &rArr; tos_msg_q_destroy &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_destroy
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_message_queue
</UL>

<P><STRONG><a name="[17e]"></a>test_tos_message_queue_destroy</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, suit_message_queue.o(i.test_tos_message_queue_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = test_tos_message_queue_destroy &rArr; tos_msg_q_destroy &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_message_queue
</UL>

<P><STRONG><a name="[182]"></a>test_tos_message_queue_flush</STRONG> (Thumb, 1670 bytes, Stack size 40 bytes, suit_message_queue.o(i.test_tos_message_queue_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = test_tos_message_queue_flush &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_reset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_reset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_reset
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_post
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_flush
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_destroy
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_message_queue
</UL>

<P><STRONG><a name="[17f]"></a>test_tos_message_queue_pend</STRONG> (Thumb, 710 bytes, Stack size 32 bytes, suit_message_queue.o(i.test_tos_message_queue_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = test_tos_message_queue_pend &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_reset
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_msg_reset
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_post
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_destroy
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_message_queue
</UL>

<P><STRONG><a name="[180]"></a>test_tos_message_queue_pend_timed</STRONG> (Thumb, 1382 bytes, Stack size 40 bytes, suit_message_queue.o(i.test_tos_message_queue_pend_timed))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = test_tos_message_queue_pend_timed &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_reset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_reset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_reset
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_msg_reset
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_post
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_destroy
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_message_queue
</UL>

<P><STRONG><a name="[181]"></a>test_tos_message_queue_post_all</STRONG> (Thumb, 1250 bytes, Stack size 32 bytes, suit_message_queue.o(i.test_tos_message_queue_post_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = test_tos_message_queue_post_all &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_reset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_reset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_reset
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_post_all
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_post
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_destroy
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_message_queue
</UL>

<P><STRONG><a name="[74]"></a>test_prio_mail_queue_pend_task_entry</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, suit_priority_mail_queue.o(i.test_prio_mail_queue_pend_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = test_prio_mail_queue_pend_task_entry &rArr; tos_prio_mail_q_pend &rArr; tos_prio_q_dequeue &rArr; prio_q_prio_mgr_slot_dequeue &rArr; tos_bin_heap_pop &rArr; bin_heap_percolate_down &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_set
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_set
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mail_set
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_pend
</UL>
<BR>[Address Reference Count : 3]<UL><LI> suit_priority_mail_queue.o(i.test_tos_prio_mail_queue_flush)
<LI> suit_priority_mail_queue.o(i.test_tos_prio_mail_queue_pend)
<LI> suit_priority_mail_queue.o(i.test_tos_prio_mail_queue_post_all)
</UL>
<P><STRONG><a name="[75]"></a>test_prio_mail_queue_pend_timed_task_entry</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, suit_priority_mail_queue.o(i.test_prio_mail_queue_pend_timed_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = test_prio_mail_queue_pend_timed_task_entry &rArr; tos_prio_mail_q_pend &rArr; tos_prio_q_dequeue &rArr; prio_q_prio_mgr_slot_dequeue &rArr; tos_bin_heap_pop &rArr; bin_heap_percolate_down &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_set
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_set
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mail_set
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_pend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> suit_priority_mail_queue.o(i.test_tos_prio_mail_queue_pend_timed)
</UL>
<P><STRONG><a name="[18e]"></a>test_tos_prio_mail_queue_create</STRONG> (Thumb, 380 bytes, Stack size 8 bytes, suit_priority_mail_queue.o(i.test_tos_prio_mail_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = test_tos_prio_mail_queue_create &rArr; tos_prio_mail_q_create &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_destroy
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_priority_mail_queue
</UL>

<P><STRONG><a name="[18f]"></a>test_tos_prio_mail_queue_destroy</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, suit_priority_mail_queue.o(i.test_tos_prio_mail_queue_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = test_tos_prio_mail_queue_destroy &rArr; tos_prio_mail_q_destroy &rArr; tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_priority_mail_queue
</UL>

<P><STRONG><a name="[193]"></a>test_tos_prio_mail_queue_flush</STRONG> (Thumb, 1712 bytes, Stack size 40 bytes, suit_priority_mail_queue.o(i.test_tos_prio_mail_queue_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = test_tos_prio_mail_queue_flush &rArr; tos_prio_mail_q_post &rArr; prio_mail_q_do_post &rArr; tos_prio_q_enqueue &rArr; prio_q_do_enqueue &rArr; prio_q_prio_mgr_slot_enqueue &rArr; tos_bin_heap_push &rArr; bin_heap_percolate_up &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_reset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_reset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_reset
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_post
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_flush
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_destroy
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_priority_mail_queue
</UL>

<P><STRONG><a name="[190]"></a>test_tos_prio_mail_queue_pend</STRONG> (Thumb, 1856 bytes, Stack size 64 bytes, suit_priority_mail_queue.o(i.test_tos_prio_mail_queue_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = test_tos_prio_mail_queue_pend &rArr; tos_prio_mail_q_post &rArr; prio_mail_q_do_post &rArr; tos_prio_q_enqueue &rArr; prio_q_do_enqueue &rArr; prio_q_prio_mgr_slot_enqueue &rArr; tos_bin_heap_push &rArr; bin_heap_percolate_up &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_reset
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mail_reset
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_post
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_destroy
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_priority_mail_queue
</UL>

<P><STRONG><a name="[191]"></a>test_tos_prio_mail_queue_pend_timed</STRONG> (Thumb, 1500 bytes, Stack size 48 bytes, suit_priority_mail_queue.o(i.test_tos_prio_mail_queue_pend_timed))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = test_tos_prio_mail_queue_pend_timed &rArr; tos_prio_mail_q_post &rArr; prio_mail_q_do_post &rArr; tos_prio_q_enqueue &rArr; prio_q_do_enqueue &rArr; prio_q_prio_mgr_slot_enqueue &rArr; tos_bin_heap_push &rArr; bin_heap_percolate_up &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_reset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_reset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_reset
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mail_reset
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_post
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_destroy
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_priority_mail_queue
</UL>

<P><STRONG><a name="[192]"></a>test_tos_prio_mail_queue_post_all</STRONG> (Thumb, 1642 bytes, Stack size 40 bytes, suit_priority_mail_queue.o(i.test_tos_prio_mail_queue_post_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = test_tos_prio_mail_queue_post_all &rArr; tos_prio_mail_q_post_all &rArr; prio_mail_q_do_post &rArr; tos_prio_q_enqueue &rArr; prio_q_do_enqueue &rArr; prio_q_prio_mgr_slot_enqueue &rArr; tos_bin_heap_push &rArr; bin_heap_percolate_up &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_reset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_reset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_reset
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_post_all
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_post
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_destroy
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_mail_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_priority_mail_queue
</UL>

<P><STRONG><a name="[76]"></a>test_priority_message_queue_pend_task_entry</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, suit_priority_message_queue.o(i.test_priority_message_queue_pend_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = test_priority_message_queue_pend_task_entry &rArr; tos_prio_msg_q_pend &rArr; tos_prio_q_dequeue &rArr; prio_q_prio_mgr_slot_dequeue &rArr; tos_bin_heap_pop &rArr; bin_heap_percolate_down &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_set
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_set
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_msg_set
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_pend
</UL>
<BR>[Address Reference Count : 3]<UL><LI> suit_priority_message_queue.o(i.test_tos_priority_message_queue_flush)
<LI> suit_priority_message_queue.o(i.test_tos_priority_message_queue_pend)
<LI> suit_priority_message_queue.o(i.test_tos_priority_message_queue_post_all)
</UL>
<P><STRONG><a name="[77]"></a>test_priority_message_queue_pend_timed_task_entry</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, suit_priority_message_queue.o(i.test_priority_message_queue_pend_timed_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = test_priority_message_queue_pend_timed_task_entry &rArr; tos_prio_msg_q_pend &rArr; tos_prio_q_dequeue &rArr; prio_q_prio_mgr_slot_dequeue &rArr; tos_bin_heap_pop &rArr; bin_heap_percolate_down &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_set
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_set
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_msg_set
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_pend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> suit_priority_message_queue.o(i.test_tos_priority_message_queue_pend_timed)
</UL>
<P><STRONG><a name="[194]"></a>test_tos_priority_message_queue_create</STRONG> (Thumb, 374 bytes, Stack size 8 bytes, suit_priority_message_queue.o(i.test_tos_priority_message_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = test_tos_priority_message_queue_create &rArr; tos_prio_msg_q_create &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_destroy
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_priority_message_queue
</UL>

<P><STRONG><a name="[195]"></a>test_tos_priority_message_queue_destroy</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, suit_priority_message_queue.o(i.test_tos_priority_message_queue_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = test_tos_priority_message_queue_destroy &rArr; tos_prio_msg_q_destroy &rArr; tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_priority_message_queue
</UL>

<P><STRONG><a name="[199]"></a>test_tos_priority_message_queue_flush</STRONG> (Thumb, 1694 bytes, Stack size 40 bytes, suit_priority_message_queue.o(i.test_tos_priority_message_queue_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = test_tos_priority_message_queue_flush &rArr; tos_prio_msg_q_post &rArr; prio_msg_q_do_post &rArr; tos_prio_q_enqueue &rArr; prio_q_do_enqueue &rArr; prio_q_prio_mgr_slot_enqueue &rArr; tos_bin_heap_push &rArr; bin_heap_percolate_up &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_reset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_reset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_reset
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_post
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_flush
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_destroy
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_priority_message_queue
</UL>

<P><STRONG><a name="[196]"></a>test_tos_priority_message_queue_pend</STRONG> (Thumb, 1546 bytes, Stack size 40 bytes, suit_priority_message_queue.o(i.test_tos_priority_message_queue_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = test_tos_priority_message_queue_pend &rArr; tos_prio_msg_q_post &rArr; prio_msg_q_do_post &rArr; tos_prio_q_enqueue &rArr; prio_q_do_enqueue &rArr; prio_q_prio_mgr_slot_enqueue &rArr; tos_bin_heap_push &rArr; bin_heap_percolate_up &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_reset
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_msg_reset
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_post
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_destroy
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_priority_message_queue
</UL>

<P><STRONG><a name="[197]"></a>test_tos_priority_message_queue_pend_timed</STRONG> (Thumb, 1396 bytes, Stack size 40 bytes, suit_priority_message_queue.o(i.test_tos_priority_message_queue_pend_timed))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = test_tos_priority_message_queue_pend_timed &rArr; tos_prio_msg_q_post &rArr; prio_msg_q_do_post &rArr; tos_prio_q_enqueue &rArr; prio_q_do_enqueue &rArr; prio_q_prio_mgr_slot_enqueue &rArr; tos_bin_heap_push &rArr; bin_heap_percolate_up &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_reset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_reset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_reset
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_msg_reset
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_post
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_destroy
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_priority_message_queue
</UL>

<P><STRONG><a name="[198]"></a>test_tos_priority_message_queue_post_all</STRONG> (Thumb, 1278 bytes, Stack size 32 bytes, suit_priority_message_queue.o(i.test_tos_priority_message_queue_post_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = test_tos_priority_message_queue_post_all &rArr; tos_prio_msg_q_post_all &rArr; prio_msg_q_do_post &rArr; tos_prio_q_enqueue &rArr; prio_q_do_enqueue &rArr; prio_q_prio_mgr_slot_enqueue &rArr; tos_bin_heap_push &rArr; bin_heap_percolate_up &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task_hook_reset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_err_reset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_count_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_context_reset
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_post_all
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_post
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_destroy
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_msg_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_priority_message_queue
</UL>

<P><STRONG><a name="[19a]"></a>test_tos_priority_queue_create</STRONG> (Thumb, 414 bytes, Stack size 16 bytes, suit_priority_queue.o(i.test_tos_priority_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = test_tos_priority_queue_create &rArr; tos_prio_q_create &rArr; prio_q_prio_mgr_init &rArr; tos_bin_heap_create
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_destroy
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_priority_queue
</UL>

<P><STRONG><a name="[19b]"></a>test_tos_priority_queue_destroy</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, suit_priority_queue.o(i.test_tos_priority_queue_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = test_tos_priority_queue_destroy &rArr; tos_prio_q_destroy &rArr; prio_q_prio_mgr_deinit &rArr; tos_bin_heap_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_priority_queue
</UL>

<P><STRONG><a name="[19c]"></a>test_tos_priority_queue_enqueue</STRONG> (Thumb, 768 bytes, Stack size 424 bytes, suit_priority_queue.o(i.test_tos_priority_queue_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = test_tos_priority_queue_enqueue &rArr; tos_prio_q_dequeue &rArr; prio_q_prio_mgr_slot_dequeue &rArr; tos_bin_heap_pop &rArr; bin_heap_percolate_down &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_enqueue
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_destroy
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_dequeue
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_create
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_is_full
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_priority_queue
</UL>

<P><STRONG><a name="[19e]"></a>test_tos_priority_queue_enqueue_limit</STRONG> (Thumb, 990 bytes, Stack size 424 bytes, suit_priority_queue.o(i.test_tos_priority_queue_enqueue_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = test_tos_priority_queue_enqueue_limit &rArr; tos_prio_q_dequeue &rArr; prio_q_prio_mgr_slot_dequeue &rArr; tos_bin_heap_pop &rArr; bin_heap_percolate_down &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_enqueue
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_destroy
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_dequeue
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_create
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_is_full
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_priority_queue
</UL>

<P><STRONG><a name="[19f]"></a>test_tos_priority_queue_flush</STRONG> (Thumb, 568 bytes, Stack size 232 bytes, suit_priority_queue.o(i.test_tos_priority_queue_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = test_tos_priority_queue_flush &rArr; tos_prio_q_dequeue &rArr; prio_q_prio_mgr_slot_dequeue &rArr; tos_bin_heap_pop &rArr; bin_heap_percolate_down &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_flush
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_enqueue
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_destroy
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_dequeue
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_create
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_is_full
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_priority_queue
</UL>

<P><STRONG><a name="[19d]"></a>test_tos_priority_queue_int_enqueue</STRONG> (Thumb, 614 bytes, Stack size 160 bytes, suit_priority_queue.o(i.test_tos_priority_queue_int_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = test_tos_priority_queue_int_enqueue &rArr; tos_prio_q_dequeue &rArr; prio_q_prio_mgr_slot_dequeue &rArr; tos_bin_heap_pop &rArr; bin_heap_percolate_down &rArr; bin_heap_do_percolate_up
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_enqueue
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_destroy
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_dequeue
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_create
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_is_full
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_prio_q_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_priority_queue
</UL>

<P><STRONG><a name="[1a0]"></a>test_tos_ring_queue_create</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, suit_ring_queue.o(i.test_tos_ring_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = test_tos_ring_queue_create &rArr; tos_ring_q_create
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_destroy
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_ring_queue
</UL>

<P><STRONG><a name="[1a1]"></a>test_tos_ring_queue_destroy</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, suit_ring_queue.o(i.test_tos_ring_queue_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = test_tos_ring_queue_destroy &rArr; tos_ring_q_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_ring_queue
</UL>

<P><STRONG><a name="[1a6]"></a>test_tos_ring_queue_flush</STRONG> (Thumb, 526 bytes, Stack size 32 bytes, suit_ring_queue.o(i.test_tos_ring_queue_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = test_tos_ring_queue_flush &rArr; tos_ring_q_dequeue &rArr; tos_ring_q_is_empty &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_full
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_empty
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_flush
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_destroy
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_ring_queue
</UL>

<P><STRONG><a name="[1a4]"></a>test_tos_ring_queue_struct_enqueue</STRONG> (Thumb, 682 bytes, Stack size 88 bytes, suit_ring_queue.o(i.test_tos_ring_queue_struct_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = test_tos_ring_queue_struct_enqueue &rArr; tos_ring_q_dequeue &rArr; tos_ring_q_is_empty &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_full
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_empty
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_destroy
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_ring_queue
</UL>

<P><STRONG><a name="[1a5]"></a>test_tos_ring_queue_struct_enqueue_limit</STRONG> (Thumb, 932 bytes, Stack size 88 bytes, suit_ring_queue.o(i.test_tos_ring_queue_struct_enqueue_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = test_tos_ring_queue_struct_enqueue_limit &rArr; tos_ring_q_dequeue &rArr; tos_ring_q_is_empty &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_full
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_empty
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_destroy
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_ring_queue
</UL>

<P><STRONG><a name="[1a2]"></a>test_tos_ring_queue_u8_enqueue</STRONG> (Thumb, 526 bytes, Stack size 32 bytes, suit_ring_queue.o(i.test_tos_ring_queue_u8_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = test_tos_ring_queue_u8_enqueue &rArr; tos_ring_q_dequeue &rArr; tos_ring_q_is_empty &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_full
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_empty
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_destroy
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_ring_queue
</UL>

<P><STRONG><a name="[1a3]"></a>test_tos_ring_queue_u8_enqueue_limit</STRONG> (Thumb, 776 bytes, Stack size 32 bytes, suit_ring_queue.o(i.test_tos_ring_queue_u8_enqueue_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = test_tos_ring_queue_u8_enqueue_limit &rArr; tos_ring_q_dequeue &rArr; tos_ring_q_is_empty &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_full
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_empty
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_destroy
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suit_ring_queue
</UL>

<P><STRONG><a name="[d2]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf$8
</UL>

<P><STRONG><a name="[d8]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d7]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
